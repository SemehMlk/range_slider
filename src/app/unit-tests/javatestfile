import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.data.jpa.domain.Specification;

import java.lang.reflect.Method;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.catchThrowable;

public class MessageSpecificationBuilderTest {

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void buildSpecification_ShouldThrowInvalidRequestException_WhenCriteriaIsInvalid() {
        ApiSearchRequestDto request = new ApiSearchRequestDto();
        request.setCriteria(Collections.emptyList()); // Invalid criteria

        Throwable thrown = catchThrowable(() -> {
            MessageSpecificationBuilder.buildSpecification(request);
        });

        assertThat(thrown).isInstanceOf(InvalidRequestException.class);
        InvalidRequestException exception = (InvalidRequestException) thrown;
        assertThat(exception.getErrors()).hasSize(1);
        assertThat(exception.getErrors().get(0).getMessage()).isEqualTo("Bad search request.");
        assertThat(exception.getStatus()).isEqualTo(HttpStatus.BAD_REQUEST);
    }

    @Test
    public void buildSpecification_ShouldReturnSpecification_WhenCriteriaIsValid() {
        ApiSearchCriteriaDto criteria = new ApiSearchCriteriaDto();
        criteria.setCriteriaType("EQUAL_DATE");
        criteria.setSearchField(new ApiSearchableFieldDto());
        criteria.getSearchField().setField("CREATION_DATE");
        criteria.setSearchDateValue(LocalDate.now());

        ApiSearchRequestDto request = new ApiSearchRequestDto();
        request.setCriteria(List.of(criteria));
        request.setLogicOperator(ApiLogicSearchOperatorDto.AND);

        Specification<KemmCanonicalMessage> spec = MessageSpecificationBuilder.buildSpecification(request);

        assertThat(spec).isNotNull();
    }

    @Test
    public void createDateTimeRangeSpecification_ShouldReturnCorrectSpecification() throws Exception {
        ApiDateTimeRangeCriteriaDto criteria = new ApiDateTimeRangeCriteriaDto();
        criteria.setSearchField(new ApiSearchableFieldDto());
        criteria.getSearchField().setField("CREATION_DATE");
        criteria.setMinDate(OffsetDateTime.now(ZoneOffset.UTC));
        criteria.setMaxDate(OffsetDateTime.now(ZoneOffset.UTC).plusDays(1));

        Method method = MessageSpecificationBuilder.class.getDeclaredMethod("createDateTimeRangeSpecification", ApiDateTimeRangeCriteriaDto.class);
        method.setAccessible(true);

        Specification<KemmCanonicalMessage> spec = (Specification<KemmCanonicalMessage>) method.invoke(null, criteria);

        assertThat(spec).isNotNull();
    }

    @Test
    public void createEqualDateSpecification_ShouldReturnCorrectSpecification() throws Exception {
        ApiEqualDateCriteriaDto criteria = new ApiEqualDateCriteriaDto();
        criteria.setSearchField(new ApiSearchableFieldDto());
        criteria.getSearchField().setField("CREATION_DATE");
        criteria.setSearchDateValue(LocalDate.now());

        Method method = MessageSpecificationBuilder.class.getDeclaredMethod("createEqualDateSpecification", ApiEqualDateCriteriaDto.class);
        method.setAccessible(true);

        Specification<KemmCanonicalMessage> spec = (Specification<KemmCanonicalMessage>) method.invoke(null, criteria);

        assertThat(spec).isNotNull();
    }

    @Test
    public void createInLastTimeLapseSpecification_ShouldReturnCorrectSpecification() throws Exception {
        ApiInLastTimeLapseCriteriaDto criteria = new ApiInLastTimeLapseCriteriaDto();
        criteria.setSearchField(new ApiSearchableFieldDto());
        criteria.getSearchField().setField("CREATION_DATE");
        criteria.setTimeLapse(24);
        criteria.setTimeUnit(ApiTimeUnitDto.HOUR);

        Method method = MessageSpecificationBuilder.class.getDeclaredMethod("createInLastTimeLapseSpecification", ApiInLastTimeLapseCriteriaDto.class);
        method.setAccessible(true);

        Specification<KemmCanonicalMessage> spec = (Specification<KemmCanonicalMessage>) method.invoke(null, criteria);

        assertThat(spec).isNotNull();
    }

    @Test
    public void createTextSpecification_ShouldReturnCorrectSpecification() throws Exception {
        ApiTextCriteriaDto criteria = new ApiTextCriteriaDto();
        criteria.setSearchField(new ApiSearchableFieldDto());
        criteria.getSearchField().setField("MESSAGE_CONTENT");
        criteria.setSearchText("test");

        Method method = MessageSpecificationBuilder.class.getDeclaredMethod("createTextSpecification", ApiTextCriteriaDto.class);
        method.setAccessible(true);

        Specification<KemmCanonicalMessage> spec = (Specification<KemmCanonicalMessage>) method.invoke(null, criteria);

        assertThat(spec).isNotNull();
    }

    @Test
    public void createRegexSpecification_ShouldReturnCorrectSpecification() throws Exception {
        ApiRegexCriteriaDto criteria = new ApiRegexCriteriaDto();
        criteria.setSearchField(new ApiSearchableFieldDto());
        criteria.getSearchField().setField("MESSAGE_CONTENT");
        criteria.setSearchValue("test.*");

        Method method = MessageSpecificationBuilder.class.getDeclaredMethod("createRegexSpecification", ApiRegexCriteriaDto.class);
        method.setAccessible(true);

        Specification<KemmCanonicalMessage> spec = (Specification<KemmCanonicalMessage>) method.invoke(null, criteria);

        assertThat(spec).isNotNull();
    }

    // Ajoutez d'autres tests pour les autres méthodes privées si nécessaire
}
