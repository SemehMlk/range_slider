import { directionValueFormatter } from './path-to-your-function';  // Modifiez le chemin d'import selon la structure de votre projet

// Mock du DIRECTIONS_MAP
const DIRECTIONS_MAP = new Map([
  ['NORTH', 'North'],
  ['SOUTH', 'South'],
  ['EAST', 'East'],
  ['WEST', 'West']
]);

describe('directionValueFormatter', () => {

  it('should return the correct direction name for a valid direction', () => {
    const params = { value: 'NORTH' } as any; // Créez un objet params avec la valeur à tester
    const result = directionValueFormatter(params);
    expect(result).toBe('North'); // Vérifie que la fonction retourne la bonne valeur
  });

  it('should return an empty string for an invalid direction', () => {
    const params = { value: 'INVALID_DIRECTION' } as any;
    const result = directionValueFormatter(params);
    expect(result).toBe(''); // Vérifie que la fonction retourne une chaîne vide pour une direction non valide
  });

  it('should return an empty string for a null value', () => {
    const params = { value: null } as any;
    const result = directionValueFormatter(params);
    expect(result).toBe(''); // Vérifie que la fonction retourne une chaîne vide si la valeur est null
  });

  it('should return an empty string for an undefined value', () => {
    const params = { value: undefined } as any;
    const result = directionValueFormatter(params);
    expect(result).toBe(''); // Vérifie que la fonction retourne une chaîne vide si la valeur est undefined
  });

});
