import org.openapitools.model.StreamDTO;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class StreamService implements StreamApiDelegate {

    private static final int UP_STREAM_QUEUE_MIN_LENGTH = 6; // Hypothèse d'une longueur minimale
    private static final int UP_STREAM_QUEUE_THIRD_CHARACTER = 2; // Index 2 pour la troisième position
    private static final int UP_STREAM_QUEUE_SIXTH_CHARACTER = 5; // Index 5 pour la sixième position
    private static final String SND_FLEX_TO = "SND_FLEX_TO_";
    private static final String RCV_ = "RCV_";

    private final StreamRepository streamRepository;

    public StreamService(StreamRepository streamRepository) {
        this.streamRepository = streamRepository;
    }

    @Override
    @Transactional
    public ResponseEntity<List<Void>> importStreams(@NotNull @Valid @NotEmpty List<StreamDTO> streams) {

        // Générer les propriétés supplémentaires pour chaque stream (dont l'alias) avant la sauvegarde
        List<KemmStream> entities = streams.stream()
            .map(this::generateAdditionalPropertiesAndConvertToEntity)
            .collect(Collectors.toList());

        // Récupérer les alias générés pour vérifier s'ils existent déjà dans la base de données
        Set<String> generatedAliases = entities.stream()
            .map(KemmStream::getAlias)
            .collect(Collectors.toSet());

        // Vérifier si certains alias existent déjà dans la base de données
        Set<String> existingAliases = findExistingAliases(generatedAliases);
        if (!existingAliases.isEmpty()) {
            throw new InvalidRequestException(ApiErrorCodes.INVALID_SEARCH_REQUEST, 
                List.of("These aliases already exist: " + String.join(", ", existingAliases)));
        }

        // Sauvegarder les entités dans la base de données si tout est correct
        streamRepository.saveAll(entities);

        return ResponseEntity.ok(new ArrayList<>());
    }

    /**
     * Traite la file d'attente upStreamQueue et génère les alias et la direction si nécessaire.
     * @param streamDTO Le DTO du stream à traiter.
     * @return L'entité KemmStream avec les propriétés générées.
     */
    private KemmStream generateAdditionalPropertiesAndConvertToEntity(StreamDTO streamDTO) {
        String upStreamQueue = streamDTO.getUpStreamQueue();

        if (upStreamQueue != null && !upStreamQueue.trim().isEmpty() && upStreamQueue.length() >= UP_STREAM_QUEUE_MIN_LENGTH) {
            // Génération de l'alias et de la direction en fonction des règles définies
            String aliasPart = upStreamQueue.substring(UP_STREAM_QUEUE_THIRD_CHARACTER, UP_STREAM_QUEUE_SIXTH_CHARACTER);

            if ("FLX".equals(aliasPart)) {
                streamDTO.setAlias(SND_FLEX_TO + upStreamQueue.substring(UP_STREAM_QUEUE_THIRD_CHARACTER));
                streamDTO.setDirection(KemmStreamDirectionEnum.OUTBOUND); // OUTBOUND direction
            } else {
                streamDTO.setAlias(RCV_ + upStreamQueue.substring(UP_STREAM_QUEUE_THIRD_CHARACTER) + "_TO_FLEX");
                streamDTO.setDirection(KemmStreamDirectionEnum.INBOUND); // INBOUND direction
            }
        }

        // Convertir en entité KemmStream avant la sauvegarde
        return convertToEntity(streamDTO);
    }

    // Méthode pour convertir le StreamDTO en entité KemmStream
    private KemmStream convertToEntity(StreamDTO streamDTO) {
        KemmStream stream = new KemmStream();
        stream.setAlias(streamDTO.getAlias());
        stream.setDirection(streamDTO.getDirection());
        // Ajouter d'autres mappages si nécessaire
        return stream;
    }

    // Méthode pour trouver les alias existants dans la base de données
    private Set<String> findExistingAliases(Set<String> aliases) {
        return streamRepository.findByAliasIn(aliases)
                .stream()
                .map(KemmStream::getAlias)
                .collect(Collectors.toSet());
    }
}
