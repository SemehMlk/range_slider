@Service
@Slf4j
@RequiredArgsConstructor
public class MessageScopeProcessor {

    private final ScopeRepository scopeRepository;
    private final RuleExecutionService ruleExecutionService;
    private final RuleCompiler ruleCompiler;
    private final RoutingRuleValidator ruleValidator;

    public CheckRulesResult processMx(final CanonicalMessage canonicalMessage, List<RuleBean> activeRules) {
        final MxFieldExtractor mxFieldExtractor = MxFieldExtractor.get(canonicalMessage);
        return ruleExecutionService.applyRules(mxFieldExtractor, activeRules);
    }
}


public Scope getMessageScope(CanonicalMessage canonicalMessage) {
    return scopeRepository.findAll().stream()
        .filter(scope -> isMessageScope(canonicalMessage, scope))
        .findFirst()
        .orElse(null);
}

public Boolean isMessageScope(CanonicalMessage canonicalMessage, Scope scope) {
    try {
        List<RuleBean> activeRules = buildRules(scope.getCondition());
        CheckRulesResult checkRulesResult = processMx(canonicalMessage, activeRules);
        return Optional.ofNullable(checkRulesResult)
            .map(CheckRulesResult::getMatchingRules)
            .map(rules -> !rules.isEmpty())
            .orElse(false);
    } catch (Exception e) {
        log.error("Error processing message scope", e);
        return false;
    }
}


public List<RuleBean> buildRules(String conditions) {
    final RuleOperation operation = ruleValidator.compileCondition(conditions).getLeft();
    RuleBean ruleBean = RuleBean.builder()
        .condition(conditions)
        .compiledCondition(operation)
        .build();
    return Collections.singletonList(ruleBean);
}
