public class CustomMappingStrategy<T> extends ColumnPositionMappingStrategy<T> {
    private List<String> orderedColumns;

    public CustomMappingStrategy(List<String> orderedColumns) {
        this.orderedColumns = orderedColumns;
    }

    @Override
    public String[] generateHeader() {
        return orderedColumns.toArray(new String[0]);
    }

    @Override
    public int getColumnIndex(String name) {
        return orderedColumns.indexOf(name);
    }
}

public ExportResult exportDataToCsv(Function<Integer, Page<T>> fetchFunction, Function<T, R> mapFunction, List<String> columnOrder) {
    ...
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    try (OutputStreamWriter outputStreamWriter = new OutputStreamWriter(byteArrayOutputStream)) {
        CustomMappingStrategy<R> mappingStrategy = new CustomMappingStrategy<>(columnOrder);
        mappingStrategy.setType(ExportableCanonicalMessageFlow.class);

        StatefulBeanToCsvBuilder<R> builder = new StatefulBeanToCsvBuilder<R>(outputStreamWriter)
                .withMappingStrategy(mappingStrategy)
                .withSeparator(SEPARATOR)
                .withOrderedResults(true);

        StatefulBeanToCsv<R> beanToCsv = builder.build();
        beanToCsv.write(data); // data est votre liste d'objets Ã  exporter
    } catch (Exception e) {
        e.printStackTrace();
    }
    ...
}
