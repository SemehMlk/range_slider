import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.executable.ExecutableValidator;

import java.lang.reflect.Method;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

public class MessagesServiceTest {

    @InjectMocks
    private MessagesService messagesService;

    private Validator validator;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        LocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean();
        factoryBean.afterPropertiesSet();
        validator = factoryBean.getValidator();
    }

    @Test
    public void testGetAllMessagesInvalidPageNumber() throws NoSuchMethodException {
        Integer invalidPageNumber = -1; // Invalid page number
        Integer validPageSize = 10; // Valid page size

        Method method = MessagesService.class.getMethod("getAllMessages", Integer.class, Integer.class, String.class, String.class, ApiSearchRequestDto.class);
        Object[] parameterValues = {invalidPageNumber, validPageSize, "sortBy", "order", new ApiSearchRequestDto()};

        ConstraintViolationException exception = assertThrows(
                ConstraintViolationException.class,
                () -> {
                    Set<ConstraintViolation<MessagesService>> violations = validator.forExecutables()
                            .validateParameters(messagesService, method, parameterValues);
                    if (!violations.isEmpty()) {
                        throw new ConstraintViolationException(violations);
                    }
                    messagesService.getAllMessages(invalidPageNumber, validPageSize, "sortBy", "order", new ApiSearchRequestDto());
                });

        assertTrue(exception.getConstraintViolations().stream()
                .anyMatch(v -> v.getMessage().equals("must be greater than or equal to 0")));
    }

    @Test
    public void testGetAllMessagesInvalidPageSize() throws NoSuchMethodException {
        Integer validPageNumber = 0; // Valid page number
        Integer invalidPageSize = 0; // Invalid page size

        Method method = MessagesService.class.getMethod("getAllMessages", Integer.class, Integer.class, String.class, String.class, ApiSearchRequestDto.class);
        Object[] parameterValues = {validPageNumber, invalidPageSize, "sortBy", "order", new ApiSearchRequestDto()};

        ConstraintViolationException exception = assertThrows(
                ConstraintViolationException.class,
                () -> {
                    Set<ConstraintViolation<MessagesService>> violations = validator.forExecutables()
                            .validateParameters(messagesService, method, parameterValues);
                    if (!violations.isEmpty()) {
                        throw new ConstraintViolationException(violations);
                    }
                    messagesService.getAllMessages(validPageNumber, invalidPageSize, "sortBy", "order", new ApiSearchRequestDto());
                });

        assertTrue(exception.getConstraintViolations().stream()
                .anyMatch(v -> v.getMessage().equals("must be greater than or equal to 1")));
    }
}
