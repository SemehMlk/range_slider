import { formatDateToISO, formatDateToYMD, dateComparator, getSortParams, directionValueFormatter } from './helper.ts';

describe('Helper Functions', () => {

  it('should format date to ISO string correctly', () => {
    const date = new Date('2023-09-01T10:00:00Z');
    const result = formatDateToISO(date);
    expect(result).toBe('2023-09-01T10:00:00.000Z');
  });

  it('should return null for formatDateToISO when date is invalid', () => {
    const result = formatDateToISO(null);
    expect(result).toBeNull();
  });

  it('should format date to YMD string correctly', () => {
    const date = new Date('2023-09-01');
    const result = formatDateToYMD(date);
    expect(result).toBe('2023-8-1');
  });

  it('should return null for formatDateToYMD when date is invalid', () => {
    const result = formatDateToYMD(null);
    expect(result).toBeNull();
  });

  it('should compare two dates correctly', () => {
    const filterDate = new Date('2023-09-01');
    const cellValue = '2023-09-02';
    const result = dateComparator(filterDate, cellValue);
    expect(result).toBe(-1);
  });

  it('should return -1 when cellValue is invalid in dateComparator', () => {
    const filterDate = new Date('2023-09-01');
    const result = dateComparator(filterDate, null);
    expect(result).toBe(-1);
  });

  it('should return correct sort params', () => {
    const sortModel = { colId: 'date', sort: 'asc' };
    const result = getSortParams(sortModel);
    expect(result).toEqual({ column: 'date', direction: 'ASC' });
  });

  it('should format direction value correctly', () => {
    const params = { value: 'NORTH' };
    const result = directionValueFormatter(params);
    expect(result).toBe('North'); // Assurez-vous que c'est bien le format attendu dans le DIRECTIONS_MAP
  });

  it('should return empty string when direction value is not found', () => {
    const params = { value: 'UNKNOWN_DIRECTION' };
    const result = directionValueFormatter(params);
    expect(result).toBe('');
  });

});
