import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.TestPropertySource;

import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@SpringBootTest  // Charger le contexte Spring complet
@TestPropertySource("classpath:application-test.properties")  // Charger les propriétés de application-test.properties
class StreamsServiceTest {

    @MockBean
    private StreamRepository streamRepository;  // Utiliser @MockBean pour mocker StreamRepository

    @MockBean
    private StreamMapper streamMapper;  // Utiliser @MockBean pour mocker StreamMapper

    @Autowired
    private StreamsService streamsService;  // Utiliser @Autowired pour injecter automatiquement StreamsService avec les mocks

    @Autowired
    private StreamProperties streamProperties;  // Injecter automatiquement StreamProperties depuis application-test.properties

    @Test
    void testGetAllStreams() {
        // Vérifier que les propriétés sont bien injectées depuis application-test.properties
        assertThat(streamProperties.getSndFlexTo()).isEqualTo("SND_FLEX_TO_");

        // Mock d'un stream à partir du repository
        KemmStream genericStream = mock(KemmStream.class);
        StreamDto genericStreamDto = new StreamDto();

        // Configurer le repository pour qu'il retourne une liste avec un stream
        when(streamRepository.findAll()).thenReturn(Collections.singletonList(genericStream));

        // Configurer le mapper pour qu'il convertisse KemmStream en StreamDto
        when(streamMapper.mapToDto(genericStream)).thenReturn(genericStreamDto);

        // Exécution du service
        ResponseEntity<List<StreamDto>> response = streamsService.getAllStreams();

        // Vérifier que le repository et le mapper ont bien été appelés
        verify(streamRepository, times(1)).findAll();
        verify(streamMapper, times(1)).mapToDto(genericStream);

        // Vérifier la réponse retournée
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).hasSize(1);
        assertThat(response.getBody().get(0)).isEqualTo(genericStreamDto);
    }
}
