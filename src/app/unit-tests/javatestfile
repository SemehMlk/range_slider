import { 
  buildGreaterThanCriteria,
  buildLessThanCriteria,
  buildBetweenCriteria,
  buildEqualDateCriteria,
  buildLessThanDateCriteria,
  buildGreaterThanDateCriteria,
  buildBetweenDateCriteria,
  buildQuickFiltersSubCriteria 
} from './filter-builder';
import { KemApiSearchableField, KemApiSearchCriteriaType, KemApiLogicSearchOperator } from './field-enum'; // Adaptez l'import

describe('FilterBuilder Functions', () => {

  describe('buildGreaterThanCriteria', () => {
    it('should build a greater than number criteria', () => {
      const result = buildGreaterThanCriteria(KemApiSearchableField.FieldEnum.NUMBER, 10, false, false);
      expect(result.criterionType).toBe(KemApiSearchCriteriaType.LONG_RANGE);
      expect(result.minLong).toBe(10);
      expect(result.negated).toBe(false);
      expect(result.strictSearch).toBe(false);
    });
  });

  describe('buildLessThanCriteria', () => {
    it('should build a less than number criteria', () => {
      const result = buildLessThanCriteria(KemApiSearchableField.FieldEnum.NUMBER, 5, false, false);
      expect(result.criterionType).toBe(KemApiSearchCriteriaType.LONG_RANGE);
      expect(result.maxLong).toBe(5);
      expect(result.negated).toBe(false);
      expect(result.strictSearch).toBe(false);
    });
  });

  describe('buildBetweenCriteria', () => {
    it('should build a between number criteria', () => {
      const result = buildBetweenCriteria(KemApiSearchableField.FieldEnum.NUMBER, 5, 15);
      expect(result.criterionType).toBe(KemApiSearchCriteriaType.LONG_RANGE);
      expect(result.minLong).toBe(5);
      expect(result.maxLong).toBe(15);
    });
  });

  describe('buildEqualDateCriteria', () => {
    it('should build an equal date criteria', () => {
      const result = buildEqualDateCriteria(KemApiSearchableField.FieldEnum.DATE, '2023-09-04', false);
      expect(result.criterionType).toBe(KemApiSearchCriteriaType.EQUAL_DATE);
      expect(result.searchDateValue).toBe('2023-09-04');
      expect(result.negated).toBe(false);
    });
  });

  describe('buildLessThanDateCriteria', () => {
    it('should build a less than date criteria', () => {
      const result = buildLessThanDateCriteria(KemApiSearchableField.FieldEnum.DATE, '2023-08-31', false, true);
      expect(result.criterionType).toBe(KemApiSearchCriteriaType.DATE_RANGE);
      expect(result.maxDate).toBe('2023-08-31');
      expect(result.negated).toBe(false);
      expect(result.strictSearch).toBe(true);
    });
  });

  describe('buildGreaterThanDateCriteria', () => {
    it('should build a greater than date criteria', () => {
      const result = buildGreaterThanDateCriteria(KemApiSearchableField.FieldEnum.DATE, '2023-09-01', false, false);
      expect(result.criterionType).toBe(KemApiSearchCriteriaType.DATE_RANGE);
      expect(result.minDate).toBe('2023-09-01');
      expect(result.negated).toBe(false);
      expect(result.strictSearch).toBe(false);
    });
  });

  describe('buildBetweenDateCriteria', () => {
    it('should build a between date criteria', () => {
      const result = buildBetweenDateCriteria(KemApiSearchableField.FieldEnum.DATE, '2023-09-01', '2023-09-30');
      expect(result.criterionType).toBe(KemApiSearchCriteriaType.DATE_RANGE);
      expect(result.minDate).toBe('2023-09-01');
      expect(result.maxDate).toBe('2023-09-30');
    });
  });

  describe('buildQuickFiltersSubCriteria', () => {
    it('should build quick filters with subCriteria', () => {
      const subCriteria = [
        { criterionType: KemApiSearchCriteriaType.EQUAL, field: 'status', value: 'active' },
        { criterionType: KemApiSearchCriteriaType.EQUAL, field: 'status', value: 'inactive' }
      ];
      const result = buildQuickFiltersSubCriteria(subCriteria);
      expect(result.criterionType).toBe(KemApiSearchCriteriaType.IN_OPTIONS);
      expect(result.groupOperator).toBe(KemApiLogicSearchOperator.OR);
      expect(result.subCriteria).toHaveLength(2);
    });
  });

});
