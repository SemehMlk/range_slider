import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.ResponseEntity;

import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

public class MessagesServiceTest {

    @Mock
    private CanonicalMessageRepository canonicalMessageRepository;

    @Mock
    private MessageMapper messageMapper;

    @Mock
    private MessageSpecificationBuilder messageSpecificationBuilder;

    @InjectMocks
    private MessagesService messagesService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void getAllMessages_ShouldReturnMessages() {
        int pageNumber = 0;
        int pageSize = 10;
        String sortBy = "id";
        String order = "asc";
        ApiSearchRequestDto apiSearchRequest = new ApiSearchRequestDto();

        Specification<KemmCanonicalMessage> spec = (root, query, criteriaBuilder) -> criteriaBuilder.conjunction();
        Sort.Direction direction = Sort.Direction.fromString(order);
        Pageable pageable = PageRequest.of(pageNumber, pageSize, Sort.by(direction, sortBy));

        KemmCanonicalMessage message = new KemmCanonicalMessage();
        Page<KemmCanonicalMessage> messagePage = new PageImpl<>(Collections.singletonList(message));

        when(messageSpecificationBuilder.buildSpecification(any(ApiSearchRequestDto.class))).thenReturn(spec);
        when(canonicalMessageRepository.findAll(any(Specification.class), eq(pageable))).thenReturn(messagePage);
        when(messageMapper.toDto(any(KemmCanonicalMessage.class))).thenReturn(new MessagesPageDto.MessageDto());

        ResponseEntity<MessagesPageDto> response = messagesService.getAllMessages(pageNumber, pageSize, sortBy, order, apiSearchRequest);

        assertThat(response).isNotNull();
        assertThat(response.getStatusCodeValue()).isEqualTo(200);
        MessagesPageDto body = response.getBody();
        assertThat(body).isNotNull();
        assertThat(body.getElements()).hasSize(1);
        assertThat(body.getTotalElements()).isEqualTo(1);
        assertThat(body.getCurrentPageNumber()).isEqualTo(pageNumber);
        assertThat(body.getCurrentPageSize()).isEqualTo(pageSize);
        assertThat(body.getTotalPages()).isEqualTo(1);

        verify(messageSpecificationBuilder).buildSpecification(apiSearchRequest);
        verify(canonicalMessageRepository).findAll(spec, pageable);
        verify(messageMapper).toDto(message);
    }

    @Test
    public void getAllMessages_ShouldReturnEmptyPage_WhenNoMessagesFound() {
        int pageNumber = 0;
        int pageSize = 10;
        String sortBy = "id";
        String order = "asc";
        ApiSearchRequestDto apiSearchRequest = new ApiSearchRequestDto();

        Specification<KemmCanonicalMessage> spec = (root, query, criteriaBuilder) -> criteriaBuilder.conjunction();
        Sort.Direction direction = Sort.Direction.fromString(order);
        Pageable pageable = PageRequest.of(pageNumber, pageSize, Sort.by(direction, sortBy));

        Page<KemmCanonicalMessage> messagePage = new PageImpl<>(Collections.emptyList());

        when(messageSpecificationBuilder.buildSpecification(any(ApiSearchRequestDto.class))).thenReturn(spec);
        when(canonicalMessageRepository.findAll(any(Specification.class), eq(pageable))).thenReturn(messagePage);

        ResponseEntity<MessagesPageDto> response = messagesService.getAllMessages(pageNumber, pageSize, sortBy, order, apiSearchRequest);

        assertThat(response).isNotNull();
        assertThat(response.getStatusCodeValue()).isEqualTo(200);
        MessagesPageDto body = response.getBody();
        assertThat(body).isNotNull();
        assertThat(body.getElements()).isEmpty();
        assertThat(body.getTotalElements()).isEqualTo(0);
        assertThat(body.getCurrentPageNumber()).isEqualTo(pageNumber);
        assertThat(body.getCurrentPageSize()).isEqualTo(pageSize);
        assertThat(body.getTotalPages()).isEqualTo(0);

        verify(messageSpecificationBuilder).buildSpecification(apiSearchRequest);
        verify(canonicalMessageRepository).findAll(spec, pageable);
        verify(messageMapper, never()).toDto(any(KemmCanonicalMessage.class));
    }
}
