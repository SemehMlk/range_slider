import { ComponentFixture, TestBed } from '@angular/core/testing';
import { StreamsComponent } from './streams.component';
import { ManagerService } from '../services/manager.service';
import { KemmStreamService } from '../services/kemm-stream.service';
import { GeneralDialogService } from '../services/general-dialog.service';
import { StreamsService } from '../services/streams.service';
import { of, throwError } from 'rxjs';
import * as Papa from 'papaparse'; // UtilisÃ© pour simuler Papa.parse

describe('StreamsComponent', () => {
  let component: StreamsComponent;
  let fixture: ComponentFixture<StreamsComponent>;
  let managerServiceMock: any;
  let kemmStreamServiceMock: any;
  let generalDialogServiceMock: any;
  let apiServiceMock: any;

  beforeEach(async () => {
    managerServiceMock = {
      getAllManagers: jest.fn().mockReturnValue(of([{ id: '1', name: 'Manager1' }])),
    };

    kemmStreamServiceMock = {
      emit: jest.fn(),
    };

    generalDialogServiceMock = {
      success: jest.fn(),
      error: jest.fn(),
    };

    apiServiceMock = {
      importStreams: jest.fn().mockReturnValue(of({})),
    };

    await TestBed.configureTestingModule({
      declarations: [StreamsComponent],
      providers: [
        { provide: ManagerService, useValue: managerServiceMock },
        { provide: KemmStreamService, useValue: kemmStreamServiceMock },
        { provide: GeneralDialogService, useValue: generalDialogServiceMock },
        { provide: StreamsService, useValue: apiServiceMock },
      ],
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(StreamsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  describe('ngOnInit', () => {
    it('should call getAllManagers and set mqManager', () => {
      expect(managerServiceMock.getAllManagers).toHaveBeenCalled();
      expect(component.mqManager).toEqual({ id: '1', name: 'Manager1' });
    });
  });

  describe('onFileSelect', () => {
    it('should call readCsvFile if a file is selected', () => {
      const mockEvent = {
        target: {
          files: [new File(['test'], 'test.csv', { type: 'text/csv' })],
        },
      };

      jest.spyOn(component, 'readCsvFile');
      component.onFileSelect(mockEvent as any);
      expect(component.readCsvFile).toHaveBeenCalledWith(mockEvent.target.files[0]);
    });

    it('should not call readCsvFile if no file is selected', () => {
      const mockEvent = { target: { files: [] } };
      jest.spyOn(component, 'readCsvFile');
      component.onFileSelect(mockEvent as any);
      expect(component.readCsvFile).not.toHaveBeenCalled();
    });
  });

  describe('readCsvFile', () => {
    it('should parse CSV and call importStreams with the result', (done) => {
      const mockFile = new File(['name,age\nJohn,30\nJane,25'], 'test.csv', { type: 'text/csv' });
      const mockReader = {
        readAsText: jest.fn(),
        result: 'name,age\nJohn,30\nJane,25',
        onload: () => {},
      };

      jest.spyOn(window as any, 'FileReader').mockImplementation(() => mockReader);

      jest.spyOn(Papa, 'parse').mockImplementation((csvData, config) => {
        config.complete({ data: [{ name: 'John', age: '30' }, { name: 'Jane', age: '25' }] });
      });

      jest.spyOn(component, 'importStreams');

      component.readCsvFile(mockFile);
      mockReader.onload();

      setTimeout(() => {
        expect(component.importStreams).toHaveBeenCalledWith([
          { name: 'John', age: '30', type: component.kemmStreamTypeEnum.MQ, managerId: component.mqManager?.id },
          { name: 'Jane', age: '25', type: component.kemmStreamTypeEnum.MQ, managerId: component.mqManager?.id },
        ]);
        done();
      }, 100);
    });
  });

  describe('importStreams', () => {
    it('should call apiService.importStreams and handle success', () => {
      const mockStreams = [{ name: 'John', age: '30' }];

      component.importStreams(mockStreams);

      expect(apiServiceMock.importStreams).toHaveBeenCalledWith(mockStreams);
      expect(generalDialogServiceMock.success).toHaveBeenCalledWith(['streams.dialog.body.import']);
    });

    it('should handle error correctly', () => {
      const mockStreams = [{ name: 'John', age: '30' }];
      apiServiceMock.importStreams.mockReturnValueOnce(throwError({ error: { errors: ['Error message'] } }));

      component.importStreams(mockStreams);

      expect(apiServiceMock.importStreams).toHaveBeenCalledWith(mockStreams);
      expect(generalDialogServiceMock.error).toHaveBeenCalledWith(['Error message']);
    });
  });

  describe('ngOnDestroy', () => {
    it('should unsubscribe from all subscriptions', () => {
      const mockSubscription = { unsubscribe: jest.fn() };
      component['subscriptions'] = [mockSubscription as any];

      component.ngOnDestroy();

      expect(mockSubscription.unsubscribe).toHaveBeenCalled();
    });
  });
});
