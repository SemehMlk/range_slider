import { Injectable, OnDestroy } from '@angular/core';
import { MatPaginatorIntl } from '@angular/material/paginator';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';

@Injectable()
export class CustomPaginatorIntl extends MatPaginatorIntl implements OnDestroy {
  private destroy$ = new Subject<void>(); // Gestion du cycle de vie

  // Constante pour la clé de traduction
  private readonly TRANSLATION_KEY = 'common.labels.items-per-page';

  constructor(private translate: TranslateService) {
    super();

    // Réagit aux changements de langue
    this.translate.onLangChange
      .pipe(
        takeUntil(this.destroy$),
        tap(() => this.getAndInitTranslations())
      )
      .subscribe();

    // Initialisation au chargement
    this.getAndInitTranslations();
  }

  private getAndInitTranslations(): void {
    this.translate
      .get([this.TRANSLATION_KEY])
      .pipe(
        takeUntil(this.destroy$),
        tap((translations) => {
          this.itemsPerPageLabel = translations[this.TRANSLATION_KEY];
          this.changes.next(); // Notifie le paginator que le label a changé
        })
      )
      .subscribe(); // Finalisation (nécessaire pour déclencher l'Observable)
  }

  ngOnDestroy() {
    this.destroy$.next(); // Déclenche la destruction
    this.destroy$.complete(); // Termine l'Observable
  }
}
