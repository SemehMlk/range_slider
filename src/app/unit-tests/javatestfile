import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@DataJpaTest
public class KemmStreamsRepositoryTest {

    @Autowired
    private StreamRepository streamRepository;

    @BeforeEach
    public void setup() {
        // Manually insert entities into the database before each test
        KemmStream stream1 = new KemmStream();
        stream1.setAlias("QA.KEM_FROM_FLX_MSG_GMI");
        // Set other fields for stream1

        KemmStream stream2 = new KemmStream();
        stream2.setAlias("QA.KEM_FROM_GMI_MSG");
        // Set other fields for stream2

        streamRepository.save(stream1);
        streamRepository.save(stream2);
    }

    @Test
    public void testGetStreamsByAliases() {
        Set<String> aliases = Set.of("QA.KEM_FROM_FLX_MSG_GMI", "QA.KEM_FROM_GMI_MSG");

        List<KemmStream> findedStreams = streamRepository.findByAliasIn(aliases);

        Assertions.assertThat(findedStreams).hasSize(2);
    }

    @Test
    public void testGetStreamsByEmptyAliases() {
        Set<String> aliases = Set.of(); // Empty Set
        List<KemmStream> findedStreams = streamRepository.findByAliasIn(aliases);

        // Expecting no results since no aliases are provided
        Assertions.assertThat(findedStreams).isEmpty();
    }

    @Test
    public void testGetStreamsByNonExistingAliases() {
        Set<String> aliases = Set.of("NON_EXISTENT_ALIAS_1", "NON_EXISTENT_ALIAS_2");
        List<KemmStream> findedStreams = streamRepository.findByAliasIn(aliases);

        // Expecting no results since aliases do not exist
        Assertions.assertThat(findedStreams).isEmpty();
    }

    @Test
    public void testGetStreamsByPartialAliases() {
        Set<String> aliases = Set.of("QA.KEM_FROM_FLX_MSG_GMI", "NON_EXISTENT_ALIAS_2");
        List<KemmStream> findedStreams = streamRepository.findByAliasIn(aliases);

        // Expecting one result that matches "QA.KEM_FROM_FLX_MSG_GMI"
        Assertions.assertThat(findedStreams).hasSize(1);
        Assertions.assertThat(findedStreams.get(0).getAlias()).isEqualTo("QA.KEM_FROM_FLX_MSG_GMI");
    }

    @Test
    public void testGetStreamsByNullAliases() {
        List<KemmStream> findedStreams = streamRepository.findByAliasIn(null);

        // Depending on the expected behavior, adjust the assertion
        // If null is handled by returning an empty list
        Assertions.assertThat(findedStreams).isEmpty();

        // Or, if you expect an exception, use this instead
        // Assertions.assertThrows(IllegalArgumentException.class, () -> {
        //     streamRepository.findByAliasIn(null);
        // });
    }

    @Test
    public void testGetStreamsByLargeNumberOfAliases() {
        Set<String> aliases = new HashSet<>();
        for (int i = 0; i < 1000; i++) {
            aliases.add("QA.KEM_ALIAS_" + i);
        }

        List<KemmStream> findedStreams = streamRepository.findByAliasIn(aliases);

        // Adjust the expectation based on how many you expect to find
        Assertions.assertThat(findedStreams).isNotEmpty();
    }

    @Test
    public void testGetStreamsByCaseInsensitiveAliases() {
        Set<String> aliases = Set.of("qa.kem_from_flx_msg_gmi", "qa.kem_from_gmi_msg"); // Lowercase aliases
        List<KemmStream> findedStreams = streamRepository.findByAliasIn(aliases);

        // Expecting matches even with different case
        Assertions.assertThat(findedStreams).hasSize(2);
    }
}
