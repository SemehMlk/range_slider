import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.example.model.UserPreferenceDto;
import com.example.entity.UserPreferenceEntity;
import com.example.mapper.UserPreferenceMapper;
import com.example.mapper.JsonObjectMapper;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@Import(JsonObjectMapper.class)
class UserPreferenceMapperTest {

    @Autowired
    private UserPreferenceMapper mapper;

    @Autowired
    private JsonObjectMapper jsonObjectMapper;

    @Test
    void testToEntity() {
        UserPreferenceDto dto = new UserPreferenceDto();
        dto.setId(1L);
        dto.setUtcode("TEST001");
        dto.setUicontext("CONTEXT1");
        dto.setConfigs(Map.of("key1", "value1", "key2", 2));

        UserPreferenceEntity entity = mapper.toEntity(dto);

        assertNotNull(entity);
        assertEquals(dto.getId(), entity.getId());
        assertEquals(dto.getUtcode(), entity.getUtcode());
        assertEquals(dto.getUicontext(), entity.getUicontext());
        assertTrue(entity.getConfigs().contains("key1"));
        assertTrue(entity.getConfigs().contains("value1"));
    }

    @Test
    void testToDto() {
        UserPreferenceEntity entity = new UserPreferenceEntity();
        entity.setId(1L);
        entity.setUtcode("TEST001");
        entity.setUicontext("CONTEXT1");
        entity.setConfigs("{\"key1\":\"value1\",\"key2\":2}");

        UserPreferenceDto dto = mapper.toDto(entity);

        assertNotNull(dto);
        assertEquals(entity.getId(), dto.getId());
        assertEquals(entity.getUtcode(), dto.getUtcode());
        assertEquals(entity.getUicontext(), dto.getUicontext());
        assertNotNull(dto.getConfigs());
        assertEquals("value1", ((Map)dto.getConfigs()).get("key1"));
        assertEquals(2, ((Map)dto.getConfigs()).get("key2"));
    }

    @Test
    void testNullValues() {
        UserPreferenceDto dto = new UserPreferenceDto();
        UserPreferenceEntity entity = mapper.toEntity(dto);

        assertNotNull(entity);
        assertNull(entity.getConfigs());

        UserPreferenceDto convertedDto = mapper.toDto(entity);
        assertNotNull(convertedDto);
        assertNull(convertedDto.getConfigs());
    }
}
