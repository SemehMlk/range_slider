import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.data.jpa.domain.Specification;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

public class MessageSpecificationBuilderTest {

    @Test
    public void testBuildSpecificationWithAndOperator() {
        ApiSearchRequestDto request = Mockito.mock(ApiSearchRequestDto.class);
        ApiLogicSearchOperatorDto operator = ApiLogicSearchOperatorDto.AND;
        when(request.getLogicOperator()).thenReturn(operator);

        ApiSearchCriteriaDto criteria = Mockito.mock(ApiSearchCriteriaDto.class);
        when(request.getCriteria()).thenReturn(Collections.singletonList(criteria));

        Specification<KemmCanonicalMessage> spec = MessageSpecificationBuilder.buildSpecification(request);

        assertNotNull(spec);
        // Add further assertions depending on your expected behavior
    }

    @Test
    public void testCreateTimeRangeSpecification() {
        ApiDateTimeRangeCriteriaDto criteria = Mockito.mock(ApiDateTimeRangeCriteriaDto.class);
        when(criteria.getMinDate()).thenReturn(OffsetDateTime.parse("2023-09-01T10:00:00Z"));
        when(criteria.getMaxDate()).thenReturn(OffsetDateTime.parse("2023-09-02T10:00:00Z"));

        Specification<KemmCanonicalMessage> spec = MessageSpecificationBuilder.createTimeRangeSpecification(criteria);

        assertNotNull(spec);
        // Add further assertions based on the Specification's behavior
    }

    @Test
    public void testCreateEqualDatetimeSpecification() {
        ApiEqualDatetimeCriteriaDto criteria = Mockito.mock(ApiEqualDatetimeCriteriaDto.class);
        when(criteria.getSearchDatetimeValue()).thenReturn(OffsetDateTime.parse("2023-09-01T10:00:00Z"));

        Specification<KemmCanonicalMessage> spec = MessageSpecificationBuilder.createEqualDatetimeSpecification(criteria);

        assertNotNull(spec);
        // Add further assertions depending on how the Specification is expected to behave
    }
}
