import org.junit.jupiter.api.Test;
import org.springframework.data.jpa.domain.Specification;

import static org.assertj.core.api.Assertions.assertThat;

public class MessageSpecificationBuilderTest {

    @Test
    public void testCreateSpecificationWithSubCriteria() {
        // Crée un critère avec des sous-critères
        ApiSearchCriteriaDto criteria = MessageTestUtils.createInOptionsWithSubCriteria(
            ApiSearchableFieldDto.FieldEnum.TRANSLATION_STATUS, List.of("value1", "value2")
        );

        // Crée une requête de recherche avec l'opérateur logique "AND"
        ApiSearchRequestDto request = new ApiSearchRequestDto();
        request.setLogicOperator(ApiLogicSearchOperatorDto.AND);
        request.setCriteria(List.of(criteria));

        // Appelle la méthode à tester
        Specification<KemmCanonicalMessage> spec = MessageSpecificationBuilder.buildSpecification(request);

        // Assertion pour vérifier que la spécification n'est pas nulle
        assertThat(spec).isNotNull();

        // Assertion pour vérifier que le LogicOperator est bien AND
        assertThat(request.getLogicOperator()).isEqualTo(ApiLogicSearchOperatorDto.AND);

        // Vérifie que la liste des critères contient le critère correct
        assertThat(request.getCriteria()).hasSize(1); // Vérifie qu'il y a un critère
        assertThat(request.getCriteria().get(0).getSubCriteria()).isNotEmpty(); // Vérifie que les sous-critères existent

        // Vérifie que le champ du critère est bien TRANSLATION_STATUS
        assertThat(request.getCriteria().get(0).getField()).isEqualTo(ApiSearchableFieldDto.FieldEnum.TRANSLATION_STATUS);

        // Vérifie que les valeurs des sous-critères sont correctes
        assertThat(request.getCriteria().get(0).getSubCriteria().get(0).getValue()).isEqualTo("value1");
        assertThat(request.getCriteria().get(0).getSubCriteria().get(1).getValue()).isEqualTo("value2");
    }
}
