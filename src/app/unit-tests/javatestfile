public isFilterValid(criteria: FilterCriteria): boolean {
  switch (criteria.operator) {
    case 'BETWEEN':
      return criteria.value?.min != null && criteria.value?.max != null;
    case 'IN':
    case 'NOT_IN':
      return criteria.value && criteria.value.length > 0;
    default:
      return criteria.value != null;
  }
}

public addFilter(field: any): void {
  // Vérifier la validité des filtres actuels avant de les rendre non éditables
  this.criterias.forEach(criteria => {
    if (this.isFilterValid(criteria)) {
      criteria.isEditable = false;
    } else {
      criteria.isEditable = true; // Si un critère est invalide, il reste éditable
    }
  });

  // Ajouter un nouveau filtre
  this.criterias.push({
    field,
    operator: DEFAULT_OPERATORS.get(field.fieldType),
    value: null,
    isEditable: true,
  });
}


public initializeFilters(initialCriterias: FilterCriteria[]): void {
  initialCriterias.forEach(criteria => {
    // Si le filtre est valide, il est initialisé en "readonly", sinon en "editable"
    criteria.isEditable = !this.isFilterValid(criteria);
    this.criterias.push(criteria);
  });
}

public makeFilterEditable(index: number): void {
  // Permettre la modification du filtre double-cliqué
  this.criterias.forEach((criteria, i) => {
    if (i === index) {
      criteria.isEditable = true;
    }
  });
}
