import com.opencsv.bean.ColumnPositionMappingStrategy;
import com.opencsv.bean.CsvBindByName;
import com.opencsv.bean.BeanField;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;
import java.util.List;

public class ExportCustomMappingStrategy<T> extends ColumnPositionMappingStrategy<T> {
    private final List<String> orderedColumns;

    public ExportCustomMappingStrategy(List<String> orderedColumns) {
        this.orderedColumns = orderedColumns;
    }

    @Override
    public void setColumnMapping(String... columnMapping) {
        // Configurer les noms des colonnes en fonction de orderedColumns
        super.setColumnMapping(orderedColumns.toArray(new String[0]));
    }

    @Override
    public String[] generateHeader(T bean) throws CsvRequiredFieldEmptyException {
        String[] header = new String[orderedColumns.size()];

        // Remplir le tableau header en utilisant les noms de colonnes dans orderedColumns
        for (int i = 0; i < orderedColumns.size(); i++) {
            String columnName = orderedColumns.get(i);
            BeanField beanField = findFieldByName(columnName);
            header[i] = (beanField != null) ? extractHeaderName(beanField) : columnName;
        }

        return header;
    }

    // Trouver un champ en fonction du nom de la colonne de la requête
    private BeanField findFieldByName(String columnName) {
        for (BeanField beanField : getFieldMap().values()) {
            String fieldName = extractHeaderName(beanField);
            if (fieldName != null && fieldName.equalsIgnoreCase(columnName)) {
                return beanField;
            }
        }
        return null;
    }

    // Extrait le nom de colonne défini dans @CsvBindByName
    private String extractHeaderName(BeanField beanField) {
        if (beanField == null || beanField.getField() == null) {
            return null;
        }
        CsvBindByName annotation = beanField.getField().getDeclaredAnnotation(CsvBindByName.class);
        return (annotation != null) ? annotation.column() : null;
    }
}
