package com.cacib.t2s.kemm.api.service;

import com.cacib.t2s.kemm.api.mappers.UserPreferenceMapper;
import com.cacib.t2s.kemm.common.repository.jpa.preferences.UserPreferenceRepository;
import com.cacib.t2s.kemm.domain.enums.KemmUIContext;
import com.cacib.t2s.kemm.domain.jpa.preferences.UserPreference;
import com.cacib.t2s.kemm.model.UserPreferenceDto;
import com.cacib.t2s.kemm.utils.exceptions.InvalidRequestException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserPreferencesServiceTest {

    @Mock
    private UserPreferenceRepository userPreferenceRepository;

    @Mock
    private UserPreferenceMapper userPreferenceMapper;

    @InjectMocks
    private UserPreferencesService userPreferencesService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUpdateConfigsSuccess() {
        // Arrange
        UserPreferenceDto dto = new UserPreferenceDto();
        dto.setId(1L);
        dto.setUtCode("TEST_CODE");
        dto.setUiContext("TEST_CONTEXT");

        UserPreference entity = new UserPreference();
        entity.setId(1L);
        entity.setUtCode("TEST_CODE");

        when(userPreferenceRepository.findById(dto.getId())).thenReturn(Optional.of(entity));
        when(userPreferenceMapper.toEntity(dto)).thenReturn(entity);
        when(userPreferenceRepository.save(entity)).thenReturn(entity);
        when(userPreferenceMapper.toDto(entity)).thenReturn(dto);

        // Act
        ResponseEntity<UserPreferenceDto> response = userPreferencesService.updateConfigs(dto);

        // Assert
        assertNotNull(response);
        assertEquals(dto, response.getBody());
        verify(userPreferenceRepository, times(1)).findById(dto.getId());
        verify(userPreferenceRepository, times(1)).save(entity);
        verify(userPreferenceMapper, times(1)).toDto(entity);
    }

    @Test
    void testUpdateConfigsNotFound() {
        // Arrange
        UserPreferenceDto dto = new UserPreferenceDto();
        dto.setId(1L);

        when(userPreferenceRepository.findById(dto.getId())).thenReturn(Optional.empty());

        // Act & Assert
        InvalidRequestException exception = assertThrows(InvalidRequestException.class, () -> {
            userPreferencesService.updateConfigs(dto);
        });

        assertNotNull(exception);
        verify(userPreferenceRepository, times(1)).findById(dto.getId());
        verify(userPreferenceRepository, never()).save(any());
        verify(userPreferenceMapper, never()).toDto(any());
    }

    @Test
    void testGetUserPreferencesSuccess() {
        // Arrange
        String utCode = "utXXX";
        List<UserPreference> entities = new ArrayList<>();
        UserPreference entity1 = new UserPreference();
        entity1.setUtCode(utCode);
        entities.add(entity1);

        UserPreferenceDto dto1 = new UserPreferenceDto();
        dto1.setUtCode(utCode);

        when(userPreferenceRepository.findByUtCode(utCode)).thenReturn(entities);
        when(userPreferenceMapper.toDto(entity1)).thenReturn(dto1);

        // Act
        ResponseEntity<List<UserPreferenceDto>> response = userPreferencesService.getUserPreferences();

        // Assert
        assertNotNull(response);
        assertEquals(1, response.getBody().size());
        assertEquals(dto1, response.getBody().get(0));
        verify(userPreferenceRepository, times(1)).findByUtCode(utCode);
        verify(userPreferenceMapper, times(1)).toDto(entity1);
    }

    @Test
    void testGetPreferenceByUiContextSuccess() {
        // Arrange
        String uiContext = "TEST_CONTEXT";
        String utCode = "utXXX";

        UserPreference entity = new UserPreference();
        entity.setUtCode(utCode);
        entity.setUiContext(KemmUIContext.valueOf(uiContext));

        UserPreferenceDto dto = new UserPreferenceDto();
        dto.setUtCode(utCode);
        dto.setUiContext(uiContext);

        when(userPreferenceRepository.findByUtCodeAndUiContext(utCode, KemmUIContext.valueOf(uiContext)))
                .thenReturn(Optional.of(entity));
        when(userPreferenceMapper.toDto(entity)).thenReturn(dto);

        // Act
        ResponseEntity<UserPreferenceDto> response = userPreferencesService.getPreferenceByUiContext(uiContext);

        // Assert
        assertNotNull(response);
        assertEquals(dto, response.getBody());
        verify(userPreferenceRepository, times(1))
                .findByUtCodeAndUiContext(utCode, KemmUIContext.valueOf(uiContext));
        verify(userPreferenceMapper, times(1)).toDto(entity);
    }

    @Test
    void testGetPreferenceByUiContextNotFound() {
        // Arrange
        String uiContext = "TEST_CONTEXT";
        String utCode = "utXXX";

        when(userPreferenceRepository.findByUtCodeAndUiContext(utCode, KemmUIContext.valueOf(uiContext)))
                .thenReturn(Optional.empty());

        // Act
        ResponseEntity<UserPreferenceDto> response = userPreferencesService.getPreferenceByUiContext(uiContext);

        // Assert
        assertNull(response.getBody());
        verify(userPreferenceRepository, times(1))
                .findByUtCodeAndUiContext(utCode, KemmUIContext.valueOf(uiContext));
        verify(userPreferenceMapper, never()).toDto(any());
    }
}
