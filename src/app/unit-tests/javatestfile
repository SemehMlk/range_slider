import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;

@Mapper(componentModel = "spring")
public interface StreamMapper {

    KemmStreamDto toDto(KemmStream stream);

    @Mapping(source = "kemmMqManagerSource.id", target = "managerId")
    KemmMqStreamDto toMqStreamDto(KemmMqStream stream);

    @Mapping(source = "managerId", target = "kemmMqManagerSource", qualifiedByName = "mapManagerIdToKemmMqManager")
    KemmMqStream toKemmMqStream(KemmMqStreamDto dto);

    default KemmStreamDto mapToDto(KemmStream stream) {
        if (stream instanceof KemmMqStream) {
            return toMqStreamDto((KemmMqStream) stream);
        }
        return toDto(stream);
    }

    @Named("mapManagerIdToKemmMqManager")
    default KemmMqManager mapManagerIdToKemmMqManager(Long managerId) {
        if (managerId == null) {
            return null;
        }
        KemmMqManager manager = new KemmMqManager();
        manager.setId(managerId);
        return manager;
    }

    default KemmStream toKemmStream(KemmStreamDto dto) {
        switch (dto.getType()) {
            case "MQ":
                return toKemmMqStream((KemmMqStreamDto) dto);
            default:
                throw new IllegalArgumentException("Unknown stream type: " + dto.getType());
        }
    }
}
