import java.util.*;
import java.util.regex.*;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class CLOProcessor {

    private final CLORepository cloRepository;

    // Étape 1 : Extraire toutes les valeurs entre #...# (sans doublons)
    public List<String> extractCLOs(String text) {
        Set<String> cloSet = new HashSet<>(); // Utilisation d'un Set pour éviter les doublons
        Pattern pattern = Pattern.compile("#(.*?)#"); // Nouvelle regex
        Matcher matcher = pattern.matcher(text);

        while (matcher.find()) {
            String cloFull = matcher.group(0); // Exemple : #CLO12345#, #ABC#, #XYZ#
            cloSet.add(cloFull); // Ajouter à la liste unique
        }

        return new ArrayList<>(cloSet); // Retourner une liste unique
    }

    // Étape 2 : Récupérer toutes les valeurs associées aux CLOs depuis la base
    public Map<String, List<String>> fetchCLOValues(List<String> cloKeys) {
        // Transformer la liste de #XXX# en IDs (XXX)
        List<String> cloIds = cloKeys.stream()
                .map(clo -> clo.replace("#", "")) // Extraire l'ID sans #
                .collect(Collectors.toList());

        // Récupérer toutes les valeurs groupées par CLO
        List<CLOEntity> cloEntities = cloRepository.findByCloIdIn(cloIds); // Simule une requête qui retourne plusieurs valeurs

        // Transformer la liste en une Map CLO -> Liste de valeurs
        return cloEntities.stream()
                .collect(Collectors.groupingBy(
                        clo -> "#" + clo.getCloId() + "#", // Remettre le format #XXX#
                        Collectors.mapping(CLOEntity::getValue, Collectors.toList())
                ));
    }

    // Étape 3 : Remplacer les CLOs dans le texte par leurs valeurs jointes
    public String replaceCLOs(String text, Map<String, List<String>> cloValues) {
        for (Map.Entry<String, List<String>> entry : cloValues.entrySet()) {
            String cloKey = entry.getKey(); // #XXX#
            String replacement = "(" + String.join(", ", entry.getValue()) + ")"; // (val1, val2, val3)
            text = text.replace(cloKey, replacement);
        }
        return text;
    }

    // Exécution complète
    public String processText(String text) {
        List<String> cloKeys = extractCLOs(text); // Étape 1 : Extraction des CLOs
        Map<String, List<String>> cloValues = fetchCLOValues(cloKeys); // Étape 2 : Récupération des valeurs
        return replaceCLOs(text, cloValues); // Étape 3 : Remplacement dans le texte
    }
}
