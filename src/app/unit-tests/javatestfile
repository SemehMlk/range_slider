import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;

@Entity
@Table(name = "inbound_message",
        indexes = {
                @Index(name = "inbound_message_index_status", columnList = "status"),
                @Index(name = "inbound_message_index_sha3_checksum", columnList = "sha3_checksum")
        })
@NoArgsConstructor
@Getter
@Setter
public class InboundMessage {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "inbound_message_sequence_generator")
    @SequenceGenerator(name = "inbound_message_sequence_generator", sequenceName = "inbound_message_sequence", allocationSize = 1)
    private Long id;

    @Lob
    @JdbcTypeCode(SqlTypes.LONGVARCHAR)
    private String content;

    @Column(name = "sha3_checksum", length = 100)
    private String sha3Checksum;

    @Enumerated(EnumType.STRING)
    @Column(name = "status")
    private MessageStatus status;

    @OneToOne(mappedBy = "inboundMessage", cascade = CascadeType.ALL, orphanRemoval = true)
    private CanonicalMessage canonicalMessage;

    public void setCanonicalMessage(CanonicalMessage canonicalMessage) {
        this.canonicalMessage = canonicalMessage;
        canonicalMessage.setInboundMessage(this); // Assurer la synchronisation bidirectionnelle
    }
}


import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import java.math.BigDecimal;

@Entity
@Table(name = "canonical_message")
@NoArgsConstructor
@Getter
@Setter
public class CanonicalMessage {

    @Id
    private Long id; // L'ID est le mÃªme que celui de InboundMessage

    @MapsId // Utiliser l'ID de InboundMessage comme ID de CanonicalMessage
    @OneToOne(optional = false, fetch = FetchType.LAZY)
    @JoinColumn(name = "inbound_message_id", foreignKey = @ForeignKey(name = "canonical_message_inbound_message_fk"))
    private InboundMessage inboundMessage;

    @Column(name = "sender_bic", length = 11)
    private String senderBic;

    @Column(name = "message_type")
    private String messageType;

    @Column(name = "receiver_bic", length = 11)
    private String receiverBic;

    @Column(name = "mur")
    private String mur;

    @Column(name = "trn")
    private String trn;

    @Column(name = "utr")
    private String utr;

    @Column(name = "scope")
    private String scope;

    @Column(name = "amount")
    private BigDecimal amount;
}

