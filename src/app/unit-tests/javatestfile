import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TemplateServiceTest {

    @Mock
    private TemplateRepository templateRepository;

    @Mock
    private TemplateMapper templateMapper;

    @InjectMocks
    private TemplateService templateService;

    private AutoCloseable mocks;

    @BeforeEach
    void setup() {
        mocks = MockitoAnnotations.openMocks(this);
    }

    @AfterEach
    void tearDown() throws Exception {
        mocks.close();
    }

    @Test
    void testCreateTemplate_Success() {
        Template inputTemplate = new Template();
        inputTemplate.setId(1L);
        inputTemplate.setName("Test Template");

        FLxTemplate savedEntity = new FLxTemplate();
        savedEntity.setId(1L);
        savedEntity.setName("Test Template");

        Template outputTemplate = new Template();
        outputTemplate.setId(1L);
        outputTemplate.setName("Test Template");

        when(templateMapper.toTemplate(inputTemplate)).thenReturn(savedEntity);
        when(templateRepository.save(savedEntity)).thenReturn(savedEntity);
        when(templateMapper.toTemplateDto(savedEntity)).thenReturn(outputTemplate);

        ResponseEntity<Template> response = templateService.createTemplate(inputTemplate);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Test Template", response.getBody().getName());

        verify(templateMapper).toTemplate(inputTemplate);
        verify(templateRepository).save(savedEntity);
        verify(templateMapper).toTemplateDto(savedEntity);
    }

    @Test
    void testGetTemplates_Success() {
        FLxTemplate flxTemplate = new FLxTemplate();
        flxTemplate.setId(1L);
        flxTemplate.setName("Test Template");

        Template templateDto = new Template();
        templateDto.setId(1L);
        templateDto.setName("Test Template");

        when(templateRepository.findAvailableTemplates()).thenReturn(List.of(flxTemplate));
        when(templateMapper.toTemplateDto(flxTemplate)).thenReturn(templateDto);

        ResponseEntity<List<Template>> response = templateService.getTemplates();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(1, response.getBody().size());
        assertEquals("Test Template", response.getBody().get(0).getName());

        verify(templateRepository).findAvailableTemplates();
        verify(templateMapper).toTemplateDto(flxTemplate);
    }

    @Test
    void testDeleteTemplates_Success() {
        List<Long> ids = List.of(1L, 2L);
        FLxTemplate flxTemplate = new FLxTemplate();
        flxTemplate.setId(1L);

        when(templateRepository.findByIdIn(ids)).thenReturn(List.of(flxTemplate));

        ResponseEntity<Void> response = templateService.deleteTemplates(ids);

        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
        verify(templateRepository).deleteAllById(ids);
    }

    @Test
    void testDeleteTemplates_TemplateNotFound() {
        List<Long> ids = List.of(1L);

        when(templateRepository.findByIdIn(ids)).thenReturn(List.of());

        InvalidRequestException exception = assertThrows(
            InvalidRequestException.class,
            () -> templateService.deleteTemplates(ids)
        );

        assertEquals("Template to delete not found", exception.getMessage());
        verify(templateRepository).findByIdIn(ids);
        verifyNoMoreInteractions(templateRepository);
    }

    @Test
    void testUpdateTemplate_Success() {
        Long id = 1L;
        Template inputTemplate = new Template();
        inputTemplate.setId(1L);
        inputTemplate.setName("Updated Template");

        FLxTemplate existingEntity = new FLxTemplate();
        existingEntity.setId(1L);

        FLxTemplate updatedEntity = new FLxTemplate();
        updatedEntity.setId(1L);
        updatedEntity.setName("Updated Template");

        Template outputTemplate = new Template();
        outputTemplate.setId(1L);
        outputTemplate.setName("Updated Template");

        when(templateRepository.findById(id)).thenReturn(Optional.of(existingEntity));
        when(templateMapper.toTemplate(inputTemplate)).thenReturn(updatedEntity);
        when(templateRepository.save(updatedEntity)).thenReturn(updatedEntity);
        when(templateMapper.toTemplateDto(updatedEntity)).thenReturn(outputTemplate);

        ResponseEntity<Template> response = templateService.updateTemplate(id, inputTemplate);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Updated Template", response.getBody().getName());

        verify(templateRepository).findById(id);
        verify(templateMapper).toTemplate(inputTemplate);
        verify(templateRepository).save(updatedEntity);
        verify(templateMapper).toTemplateDto(updatedEntity);
    }

    @Test
    void testUpdateTemplate_TemplateNotFound() {
        Long id = 1L;
        Template inputTemplate = new Template();

        when(templateRepository.findById(id)).thenReturn(Optional.empty());

        InvalidRequestException exception = assertThrows(
            InvalidRequestException.class,
            () -> templateService.updateTemplate(id, inputTemplate)
        );

        assertEquals("Template to update not found", exception.getMessage());
        verify(templateRepository).findById(id);
        verifyNoMoreInteractions(templateRepository);
    }
}
