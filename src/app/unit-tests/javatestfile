@Mapper(componentModel = "spring", uses = {FeatureMapper.class})
public interface ProfileMapper {

    @Mapping(source = "features", target = "featuresGroup")
    ProfileDTO toDto(Profile profile);

    Profile toEntity(ProfileDTO profileDTO);

    // Méthode pour grouper les features par type
    default List<FeatureGroupDTO> mapFeaturesToFeatureGroups(List<Feature> features) {
        return features.stream()
                .collect(Collectors.groupingBy(Feature::getType)) // Grouper par type
                .entrySet()
                .stream()
                .map(entry -> {
                    FeatureGroupDTO groupDTO = new FeatureGroupDTO();
                    groupDTO.setType(entry.getKey()); // Type
                    groupDTO.setFeatures(
                        entry.getValue().stream()
                        .map(feature -> toFeatureDto(feature)) // Mapper les features en FeatureDTO
                        .collect(Collectors.toList())
                    );
                    return groupDTO;
                })
                .collect(Collectors.toList());
    }

    // Méthode pour mapper une feature en DTO (à utiliser dans la méthode personnalisée)
    @Mapping(target = "type", ignore = true) // On ignore le type dans le DTO
    FeatureDTO toFeatureDto(Feature feature);
}
