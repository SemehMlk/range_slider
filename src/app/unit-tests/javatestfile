import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "inbound_message")
@Getter
@Setter
@NoArgsConstructor
public class InboundMessage extends UpdateDieBaseEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "inbound_message_sequence_generator")
    @SequenceGenerator(
        name = "inbound_message_sequence_generator",
        sequenceName = "inbound_message_sequence",
        allocationSize = 1
    )
    private Long id;

    @OneToOne(mappedBy = "inboundMessage", cascade = CascadeType.ALL, orphanRemoval = true)
    private CanonicalMessage canonicalMessage;

    // Helper method to set the bidirectional relationship
    public void setCanonicalMessage(CanonicalMessage canonicalMessage) {
        if (canonicalMessage == null) {
            if (this.canonicalMessage != null) {
                this.canonicalMessage.setInboundMessage(null);
            }
        } else {
            canonicalMessage.setInboundMessage(this); // Ensure bidirectional link
        }
        this.canonicalMessage = canonicalMessage;
    }
}




import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

@Entity
@Table(name = "canonical_message")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class CanonicalMessage {

    @Id
    private Long id; // This will be the same as the InboundMessage ID

    @NotNull
    @MapsId // Maps the ID of InboundMessage to this entity's ID
    @OneToOne(optional = false, cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(
        name = "inbound_message_id",
        foreignKey = @ForeignKey(name = "canonical_message_inbound_message_fk")
    )
    private InboundMessage inboundMessage;

    // Other fields (senderBic, messageType, etc.)...
}
