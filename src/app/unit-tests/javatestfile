import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@SpringJUnitConfig  // Utilisation de Spring pour configurer le test avec Spring JUnit support
@ContextConfiguration(classes = {StreamsServiceTest.TestConfig.class})  // Spécifie la configuration du test
@TestPropertySource("classpath:application-test.properties")  // Charger les propriétés du fichier de test
class StreamsServiceTest {

    @Mock
    private StreamRepository streamRepository;

    @Mock
    private StreamMapper streamMapper;

    @Autowired
    private StreamsService streamsService;

    @Autowired
    private StreamProperties streamProperties;  // Injecter automatiquement StreamProperties

    @TestConfiguration
    @EnableConfigurationProperties(StreamProperties.class)
    static class TestConfig {

        @Bean
        public StreamsService streamsService(StreamRepository streamRepository, StreamMapper streamMapper, StreamProperties streamProperties) {
            return new StreamsService(streamRepository, streamMapper, streamProperties);  // Injecter toutes les dépendances
        }
    }

    @BeforeEach
    void setUp() {
        // Initialisation des mocks si nécessaire
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testImportStreams_Successful() {
        // Vérifier que StreamProperties est bien injecté depuis application-test.properties
        assertThat(streamProperties.getSndFlexTo()).isEqualTo("SND_FLEX_TO_");

        // Configurer le mock pour StreamDTO
        MqStreamDto validStream = new MqStreamDto();
        validStream.setupUpStreamQueue("FLX123");

        List<StreamDto> streams = Collections.singletonList(validStream);

        // Mocker la conversion de DTO à entité
        KemmStream mockStreamEntity = mock(KemmStream.class);
        when(streamMapper.toKemmStream(validStream)).thenReturn(mockStreamEntity);

        // Exécution du test
        ResponseEntity<List<StreamDto>> response = streamsService.importStreams(streams);

        // Vérifier que le repository a bien été appelé
        verify(streamRepository, times(1)).saveAll(anyList());
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
    }

    @Test
    void testPropertiesInjectedCorrectly() {
        // Vérifier que les propriétés sont bien injectées dans StreamsService
        assertThat(streamProperties.getSndFlexTo()).isEqualTo("SND_FLEX_TO_");
        assertThat(streamProperties.getToFlex()).isEqualTo("_TO_FLEX");
        assertThat(streamProperties.getRcv()).isEqualTo("RCV_");
        assertThat(streamProperties.getFlx()).isEqualTo("FLX");
        assertThat(streamProperties.getUpstreamQueueSixthCharacter()).isEqualTo(15);
        assertThat(streamProperties.getUpstreamQueueThirteenthCharacter()).isEqualTo(12);
        assertThat(streamProperties.getUpstreamQueueMinLength()).isEqualTo(16);
    }
}
