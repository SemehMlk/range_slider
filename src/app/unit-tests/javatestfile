import com.opencsv.bean.ColumnPositionMappingStrategy;
import com.opencsv.bean.BeanField;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;
import com.opencsv.bean.CsvBindByName;
import java.util.List;

public class ExportCustomMappingStrategy<T> extends ColumnPositionMappingStrategy<T> {
    private final List<String> orderedColumns;

    public ExportCustomMappingStrategy(List<String> orderedColumns) {
        this.orderedColumns = orderedColumns;
    }

    @Override
    public void setColumnMapping(String... columnMapping) {
        // Configurer l'ordre des colonnes pour correspondre à orderedColumns
        super.setColumnMapping(orderedColumns.toArray(new String[0]));
    }

    @Override
    public String[] generateHeader(T bean) throws CsvRequiredFieldEmptyException {
        // Générer un en-tête basé sur les noms d'export dans @CsvBindByName
        String[] customHeader = new String[orderedColumns.size()];

        for (int i = 0; i < orderedColumns.size(); i++) {
            String columnName = orderedColumns.get(i);
            BeanField beanField = findFieldByColumnName(columnName);

            // Utiliser le nom dans @CsvBindByName, sinon le nom brut de la requête
            customHeader[i] = (beanField != null) ? extractHeaderName(beanField) : columnName;
        }

        return customHeader;
    }

    // Recherche du champ par nom de colonne en utilisant l'annotation @CsvBindByName
    private BeanField findFieldByColumnName(String columnName) {
        for (BeanField beanField : getFieldMap().values()) {
            String headerName = extractHeaderName(beanField);
            if (headerName != null && headerName.equalsIgnoreCase(columnName)) {
                return beanField;
            }
        }
        return null;
    }

    // Extrait le nom de la colonne défini dans @CsvBindByName
    private String extractHeaderName(BeanField beanField) {
        if (beanField == null || beanField.getField() == null) {
            return null;
        }
        CsvBindByName annotation = beanField.getField().getDeclaredAnnotation(CsvBindByName.class);
        return (annotation != null) ? annotation.column() : null;
    }
}
