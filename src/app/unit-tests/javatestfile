class TemplateServiceTest {

    @Mock
    private TemplateRepository templateRepository;

    @Mock
    private TemplateMapper templateMapper; // Mock de l'interface au lieu de la classe `final`

    @InjectMocks
    private TemplateService templateService;

    private AutoCloseable mocks;

    @BeforeEach
    void setup() {
        mocks = MockitoAnnotations.openMocks(this);
    }

    @AfterEach
    void tearDown() throws Exception {
        mocks.close();
    }

    @Test
    void testCreateTemplate_Success() {
        Template template = new Template();
        FLxTemplate flxTemplate = new FLxTemplate();

        when(templateMapper.toTemplate(any(Template.class))).thenReturn(flxTemplate);
        when(templateRepository.save(flxTemplate)).thenReturn(flxTemplate);
        when(templateMapper.toTemplateDto(flxTemplate)).thenReturn(template);

        ResponseEntity<Template> response = templateService.createTemplate(template);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(template, response.getBody());
        verify(templateRepository).save(flxTemplate);
    }

    // Les autres tests restent identiques
}
