// Définir les types génériques pour les arguments et résultats
export type TransformArgs<T = any> = T[];
export type TransformResult<T = any> = T[];

// Interface pour définir les transformateurs
export interface Transformer<T = any> {
  separator?: string; // Séparateur optionnel
  transform: (...args: TransformArgs<T>) => TransformResult<T>;
}

// Créer un Map générique pour gérer différents transformateurs
export const transformerMap: Map<string, Transformer<any>> = new Map();

// Ajouter un transformateur générique pour `subscribedApplication`
transformerMap.set('subscribedApplication', {
  separator: ', ', // Définit le séparateur par défaut
  transform: (...args: TransformArgs<string>): TransformResult<string> => {
    return args; // Retourne les arguments sous forme de tableau
  },
});

// Ajouter un autre type de transformateur en exemple
transformerMap.set('concatStrings', {
  separator: ' - ', // Définit un autre séparateur
  transform: (...args: TransformArgs<string>): TransformResult<string> => {
    const separator = transformerMap.get('concatStrings')?.separator ?? ' ';
    return [args.join(separator)]; // Concatène les arguments avec le séparateur
  },
});
