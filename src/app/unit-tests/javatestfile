// Définir un type générique pour les arguments et résultats
export type TransformArgs<T> = T[]; // Tableau de type générique T
export type TransformResult<T> = T[]; // Tableau de type générique T

// Interface pour définir un transformateur générique
export interface Transformer<T> {
  separator?: string; // Séparateur optionnel
  transform: (...args: TransformArgs<T>) => TransformResult<T>;
}

// Créer un Map générique avec des types explicitement spécifiés
export const transformerMap = new Map<string, Transformer<string>>(); // Utilisation de `string` comme type principal

// Ajouter un transformateur pour `subscribedApplication`
transformerMap.set('subscribedApplication', {
  separator: ', ', // Séparateur par défaut
  transform: (...args: TransformArgs<string>): TransformResult<string> => {
    return args; // Retourne les arguments sous forme de tableau
  },
});

// Ajouter un autre transformateur typé pour concaténer des chaînes
transformerMap.set('concatStrings', {
  separator: ' - ',
  transform: (...args: TransformArgs<string>): TransformResult<string> => {
    const separator = transformerMap.get('concatStrings')?.separator ?? ' ';
    return [args.join(separator)]; // Concatène les arguments avec le séparateur
  },
});
