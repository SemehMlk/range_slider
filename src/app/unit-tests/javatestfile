import com.opencsv.bean.ColumnPositionMappingStrategy;
import com.opencsv.bean.BeanField;
import com.opencsv.bean.CsvBindByName;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;
import org.apache.commons.lang3.StringUtils;

import java.util.List;
import java.util.Map;

public class CustomMappingStrategy<T> extends ColumnPositionMappingStrategy<T> {
    private final List<String> orderedColumns;
    private final Map<String, String> columnMappings;

    public CustomMappingStrategy(List<String> orderedColumns, Map<String, String> columnMappings) {
        this.orderedColumns = orderedColumns;
        this.columnMappings = columnMappings;
    }

    @Override
    public String[] generateHeader(T bean) throws CsvRequiredFieldEmptyException {
        String[] customHeader = new String[orderedColumns.size()];

        // Générer les en-têtes dans l'ordre spécifié
        for (int i = 0; i < orderedColumns.size(); i++) {
            String requestColumnName = orderedColumns.get(i);
            // Utiliser le mappage pour obtenir le nom de colonne d'export correspondant
            String exportColumnName = columnMappings.getOrDefault(requestColumnName, requestColumnName);
            BeanField beanField = findFieldByExportColumn(exportColumnName);

            // Utiliser le nom dans @CsvBindByName si le champ est trouvé
            customHeader[i] = (beanField != null) ? extractHeaderName(beanField) : exportColumnName;
        }

        return customHeader;
    }

    // Recherche du champ en fonction du nom de colonne d'export
    private BeanField findFieldByExportColumn(String exportColumnName) {
        for (BeanField beanField : getFieldMap().values()) {
            String headerName = extractHeaderName(beanField);
            if (headerName != null && headerName.equals(exportColumnName)) {
                return beanField;
            }
        }
        return null;
    }

    // Extrait le nom de colonne défini dans @CsvBindByName
    private String extractHeaderName(BeanField beanField) {
        if (beanField == null || beanField.getField() == null) {
            return null;
        }
        CsvBindByName annotation = beanField.getField().getDeclaredAnnotation(CsvBindByName.class);
        return (annotation != null) ? annotation.column() : null;
    }
}
