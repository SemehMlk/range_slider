import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class AccountService {

    /**
     * Retourne les IBANs des comptes inexistants dans la base de données.
     *
     * @param requestIds Liste des IDs envoyés dans la requête.
     * @param dbAccounts Liste des comptes récupérés depuis la base de données.
     * @return Liste des IBANs des comptes inexistants.
     */
    public List<String> getNonExistentIbans(List<Long> requestIds, List<Account> dbAccounts) {
        // Créer une map ID -> IBAN pour les comptes récupérés de la base de données
        Map<Long, String> dbIdToIbanMap = dbAccounts.stream()
                .collect(Collectors.toMap(Account::getId, Account::getIban));

        // Identifier les IBANs associés aux IDs inexistants
        return requestIds.stream()
                .filter(id -> !dbIdToIbanMap.containsKey(id)) // Filtrer les IDs qui n'existent pas
                .map(id -> getIbanFromRequest(id, requestIds, dbAccounts)) // Récupérer l'IBAN envoyé dans la requête
                .collect(Collectors.toList());
    }

    /**
     * Méthode pour retrouver l'IBAN d'un ID inexistant dans la base de données à partir de la requête.
     *
     * @param id         ID inexistant.
     * @param requestIds Liste des IDs envoyés dans la requête.
     * @param accounts   Liste complète des comptes envoyés dans la requête.
     * @return L'IBAN correspondant à l'ID inexistant.
     */
    private String getIbanFromRequest(Long id, List<Long> requestIds, List<Account> accounts) {
        // Trouver le compte correspondant à l'ID dans la requête
        return accounts.stream()
                .filter(account -> account.getId().equals(id))
                .map(Account::getIban)
                .findFirst()
                .orElse("IBAN_NON_TROUVÉ");
    }
}
