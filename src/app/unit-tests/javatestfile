jest.mock('papaparse', () => ({
  parse: jest.fn((csvData, config) => {
    config.complete({
      data: [
        { name: 'John', age: '30' },
        { name: 'Jane', age: '25' },
      ],
    });
  }),
}));

describe('readCsvFile', () => {
  it('should parse CSV and call importStreams with the result', (done) => {
    const mockFile = new File(['name,age\nJohn,30\nJane,25'], 'test.csv', { type: 'text/csv' });
    const mockReader = {
      readAsText: jest.fn(),
      result: 'name,age\nJohn,30\nJane,25',
      onload: () => {},
    };

    jest.spyOn(window as any, 'FileReader').mockImplementation(() => mockReader);

    jest.spyOn(component, 'importStreams');

    component.readCsvFile(mockFile);
    mockReader.onload();

    setTimeout(() => {
      expect(component.importStreams).toHaveBeenCalledWith([
        { name: 'John', age: '30', type: component.kemmStreamTypeEnum.MQ, managerId: component.mqManager?.id },
        { name: 'Jane', age: '25', type: component.kemmStreamTypeEnum.MQ, managerId: component.mqManager?.id },
      ]);
      done();
    }, 100);
  });
});
