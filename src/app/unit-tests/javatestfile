import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

class StreamsServiceTest {

    @Mock
    private StreamRepository streamRepository;

    @Mock
    private StreamMapper streamMapper;

    @InjectMocks
    private StreamsService streamsService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllStreams() {
        KemmStream genericStream = mock(KemmStream.class);
        KemmStreamDto genericStreamDto = new KemmStreamDto();
        when(streamRepository.findAll()).thenReturn(Arrays.asList(genericStream));
        when(streamMapper.mapToDto(genericStream)).thenReturn(genericStreamDto);

        ResponseEntity<List<KemmStreamDto>> response = streamsService.getAllStreams();

        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(1, response.getBody().size());
    }

    @Test
    void testCreateStream() {
        KemmMqStreamDto mqStreamDto = new KemmMqStreamDto();
        mqStreamDto.setAlias("MQ_Test");
        mqStreamDto.setType("MQ");

        KemmMqStream mqStream = mock(KemmMqStream.class);
        when(streamMapper.toKemmStream(mqStreamDto)).thenReturn(mqStream);
        when(streamRepository.save(mqStream)).thenReturn(mqStream);
        when(streamMapper.mapToDto(mqStream)).thenReturn(mqStreamDto);

        ResponseEntity<KemmStreamDto> response = streamsService.createStream(mqStreamDto);

        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertEquals("MQ_Test", response.getBody().getAlias());
    }
}
