@Test
public void testFindByIdIn() {
    // Arrange: Create and save multiple streams
    KemmMqStream stream1 = KemmMqStream.builder()
            .upStreamQueue("queue1")
            .downStreamQueue("down_stream_queue1")
            .alias("ALIAS1")
            .application("application1")
            .direction(KemmStreamDirection.INBOUND)
            .state(KemmStreamState.OK)
            .status(KemmStreamStatus.INACTIVE)
            .type(KemmStreamType.MQ)
            .deprecated(false) // or set this to null
            .build();
    streamRepository.save(stream1);

    KemmMqStream stream2 = KemmMqStream.builder()
            .upStreamQueue("queue2")
            .downStreamQueue("down_stream_queue2")
            .alias("ALIAS2")
            .application("application2")
            .direction(KemmStreamDirection.OUTBOUND)
            .state(KemmStreamState.OK)
            .status(KemmStreamStatus.ACTIVE)
            .type(KemmStreamType.MQ)
            .deprecated(false) // or set this to null
            .build();
    streamRepository.save(stream2);

    // Act: Find streams by their IDs
    List<Long> ids = List.of(stream1.getId(), stream2.getId());
    List<KemmStream> foundStreams = streamRepository.findByIdIn(ids);

    // Assert: Verify that both streams are returned
    assertNotNull(foundStreams);
    assertEquals(2, foundStreams.size());
    assertTrue(foundStreams.stream().anyMatch(s -> s.getId().equals(stream1.getId())));
    assertTrue(foundStreams.stream().anyMatch(s -> s.getId().equals(stream2.getId())));
}
