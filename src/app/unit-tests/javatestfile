import com.opencsv.bean.ColumnPositionMappingStrategy;
import com.opencsv.bean.BeanField;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;
import com.opencsv.bean.CsvBindByName;
import java.util.List;

public class ExportCustomMappingStrategy<T> extends ColumnPositionMappingStrategy<T> {
    private final List<String> orderedColumns;

    public ExportCustomMappingStrategy(List<String> orderedColumns) {
        this.orderedColumns = orderedColumns;
    }

    @Override
    public String[] generateHeader(T bean) throws CsvRequiredFieldEmptyException {
        // Générer l'en-tête en utilisant orderedColumns et @CsvBindByName
        String[] customHeader = new String[orderedColumns.size()];

        for (int i = 0; i < orderedColumns.size(); i++) {
            String requestColumn = orderedColumns.get(i);
            BeanField beanField = findField(i);
            String columnHeaderName = extractHeaderName(beanField);

            // Utiliser le nom de la colonne défini dans @CsvBindByName si disponible
            customHeader[i] = (columnHeaderName != null && !columnHeaderName.isEmpty()) ? columnHeaderName : requestColumn;
        }

        return customHeader;
    }

    @Override
    public void setColumnMapping(String... columnMapping) {
        // Utiliser l'ordre des colonnes spécifié par orderedColumns
        super.setColumnMapping(orderedColumns.toArray(new String[0]));
    }

    // Méthode pour extraire le nom de colonne à partir de l'annotation @CsvBindByName
    public String extractHeaderName(BeanField beanField) {
        if (beanField == null || beanField.getField() == null 
                || beanField.getField().getDeclaredAnnotationsByType(CsvBindByName.class).length == 0) {
            return "";
        }
        CsvBindByName bindByNameAnnotation = beanField.getField().getDeclaredAnnotationsByType(CsvBindByName.class)[0];
        return bindByNameAnnotation.column();
    }
}
