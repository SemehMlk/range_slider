public class StreamBuilder {

    private final KemmStreamDto streamDto;

    public StreamBuilder(KemmStreamDto streamDto) {
        this.streamDto = streamDto;
    }

    public KemmStream build() {
        if ("MQ".equalsIgnoreCase(streamDto.getType())) {
            KemmMqStream mqStream = new KemmMqStream();
            mqStream.setAlias(streamDto.getAlias());
            mqStream.setType(streamDto.getType());
            mqStream.setDescription(streamDto.getDescription());
            mqStream.setStatus(streamDto.getStatus());
            mqStream.setInputMessageType(streamDto.getInputMessageType());
            mqStream.setUpStreamQueue(((KemmMqStreamDto) streamDto).getUpStreamQueue());
            mqStream.setDownStreamQueue(((KemmMqStreamDto) streamDto).getDownStreamQueue());
            mqStream.setReplyToDownStreamQueue(((KemmMqStreamDto) streamDto).getReplyToDownStreamQueue());

            // Map KemmMqManagerDto to KemmMqManager entity
            KemmMqManager manager = new KemmMqManager();
            manager.setChannel(((KemmMqStreamDto) streamDto).getKemmMqManager().getChannel());
            manager.setHost(((KemmMqStreamDto) streamDto).getKemmMqManager().getHost());
            manager.setMqUser(((KemmMqStreamDto) streamDto).getKemmMqManager().getMqUser());
            manager.setMqPassword(((KemmMqStreamDto) streamDto).getKemmMqManager().getMqPassword());
            manager.setPort(((KemmMqStreamDto) streamDto).getKemmMqManager().getPort());

            mqStream.setKemmMqManagerSource(manager);

            return mqStream;
        } 
        // Ajouter ici d'autres types de streams si n√©cessaire
        throw new IllegalArgumentException("Invalid stream type: " + streamDto.getType());
    }
}
