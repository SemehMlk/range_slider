@ExtendWith(MockitoExtension.class)
class TemplateServiceTest {

    @Mock
    private TemplateRepository templateRepository;

    @Mock
    private FlxTemplateMapper templateMapper;

    @InjectMocks
    private TemplateService templateService;

    @Test
    void testCreateTemplate_Success() {
        Template template = new Template();
        FLxTemplate flxTemplate = new FLxTemplate();

        when(templateMapper.toTemplate(any(Template.class))).thenReturn(flxTemplate);
        when(templateRepository.save(flxTemplate)).thenReturn(flxTemplate);
        when(templateMapper.toTemplateDto(flxTemplate)).thenReturn(template);

        ResponseEntity<Template> response = templateService.createTemplate(template);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(template, response.getBody());
        verify(templateRepository).save(flxTemplate);
    }

    @Test
    void testGetTemplates_Success() {
        FLxTemplate flxTemplate = new FLxTemplate();
        List<FLxTemplate> flxTemplates = List.of(flxTemplate);
        Template templateDto = new Template();

        when(templateRepository.findAvailableTemplates()).thenReturn(flxTemplates);
        when(templateMapper.toTemplateDto(flxTemplate)).thenReturn(templateDto);

        ResponseEntity<List<Template>> response = templateService.getTemplates();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(1, response.getBody().size());
        assertEquals(templateDto, response.getBody().get(0));
    }

    @Test
    void testDeleteTemplates_Success() {
        List<Long> ids = List.of(1L, 2L);
        FLxTemplate flxTemplate = new FLxTemplate();

        when(templateRepository.findByIdIn(ids)).thenReturn(List.of(flxTemplate));

        ResponseEntity<Void> response = templateService.deleteTemplates(ids);

        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
        verify(templateRepository).deleteAllById(ids);
    }

    @Test
    void testDeleteTemplates_TemplateNotFound() {
        List<Long> ids = List.of(1L);

        when(templateRepository.findByIdIn(ids)).thenReturn(List.of());

        InvalidRequestException exception = assertThrows(
            InvalidRequestException.class,
            () -> templateService.deleteTemplates(ids)
        );

        assertEquals("Template to delete not found", exception.getMessage());
    }

    @Test
    void testUpdateTemplate_Success() {
        Long id = 1L;
        Template template = new Template();
        FLxTemplate flxTemplate = new FLxTemplate();

        when(templateRepository.findById(id)).thenReturn(Optional.of(flxTemplate));
        when(templateMapper.toTemplate(template)).thenReturn(flxTemplate);
        when(templateRepository.save(flxTemplate)).thenReturn(flxTemplate);
        when(templateMapper.toTemplateDto(flxTemplate)).thenReturn(template);

        ResponseEntity<Template> response = templateService.updateTemplate(id, template);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(template, response.getBody());
        verify(templateRepository).save(flxTemplate);
    }

    @Test
    void testUpdateTemplate_TemplateNotFound() {
        Long id = 1L;
        Template template = new Template();

        when(templateRepository.findById(id)).thenReturn(Optional.empty());

        InvalidRequestException exception = assertThrows(
            InvalidRequestException.class,
            () -> templateService.updateTemplate(id, template)
        );

        assertEquals("Template to update not found", exception.getMessage());
    }
}
