import { TestBed } from '@angular/core/testing';
import { of, Subject, Observable } from 'rxjs';
import { TranslateService, LangChangeEvent } from '@ngx-translate/core';
import { DashboardComponent } from './dashboard.component';

class MockTranslateService {
  // Créez un sujet pour onLangChange avec un type spécifique
  public onLangChange = new Subject<LangChangeEvent>();

  // Mock de la méthode get pour retourner une Observable<string>
  get(key: string | Array<string>): Observable<string | Object> {
    return of(key);
  }

  // Mock de la méthode instant pour retourner un string ou un object basé sur le type de la clé
  instant(key: string | Array<string>): string | Object {
    if (typeof key === 'string') {
      return key;
    } else {
      // Si c'est un tableau, retournez un objet avec les clés correspondantes
      return key.reduce((acc, curr) => {
        acc[curr] = curr;
        return acc;
      }, {} as Record<string, string>);
    }
  }
}

describe('DashboardComponent', () => {
  let component: DashboardComponent;
  let fixture: ComponentFixture<DashboardComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [DashboardComponent],
      providers: [
        { provide: TranslateService, useClass: MockTranslateService },
        provideHttpClient(),
        provideHttpClientTesting()
      ]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(DashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should return translation instantly', () => {
    const translateService = TestBed.inject(TranslateService);
    const translation = translateService.instant('some.key');

    expect(transla
