interface FieldInput {
  fieldType: string;
  field: string;
  operators: string[];
  options?: string[];
}

class FieldsBuilder {
  private fields: Fields = {};

  addField(name: string, type: string, operators: string[], options?: string[]): FieldsBuilder {
    this.fields[name] = {
      name: name,
      type: type,
      operators: operators,
      options: options || [],
      value: name
    };
    return this;
  }

  buildFromArray(inputArray: FieldInput[]): FieldsBuilder {
    inputArray.forEach((input) => {
      this.addField(input.field, input.fieldType, input.operators, input.options);
    });
    return this;
  }

  build(): { fields: Fields } {
    return { fields: this.fields };
  }
}

// Exemple d'utilisation avec un tableau d'objets
const inputData = [
  {
    fieldType: "DATETIME",
    field: "MESSAGE_CREATION_DATE",
    operators: ["EQUAL", "NOT_EQUAL", "BETWEEN", "GREATER_THAN", "LESS_THAN"],
    options: []
  },
  {
    fieldType: "ENUM",
    field: "MESSAGE_DIRECTION",
    operators: ["IN", "NOT_IN"],
    options: ["INPUT", "OUTPUT"]
  }
];

const fieldsConfig = new FieldsBuilder()
  .buildFromArray(inputData)
  .build();

console.log(fieldsConfig);
