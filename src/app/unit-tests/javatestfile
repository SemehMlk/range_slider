import com.opencsv.bean.ColumnPositionMappingStrategy;
import com.opencsv.bean.BeanField;
import com.opencsv.bean.CsvBindByName;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;
import org.apache.commons.lang3.StringUtils;

import java.util.List;

public class CustomMappingStrategy<T> extends ColumnPositionMappingStrategy<T> {
    private final List<String> orderedColumns;

    public CustomMappingStrategy(List<String> orderedColumns) {
        this.orderedColumns = orderedColumns;
    }

    @Override
    public String[] generateHeader(T bean) throws CsvRequiredFieldEmptyException {
        // Utilise l'ordre des colonnes spécifié dans orderedColumns
        String[] customHeader = new String[orderedColumns.size()];

        // Générer les en-têtes dans l'ordre spécifié
        for (int i = 0; i < orderedColumns.size(); i++) {
            String columnName = orderedColumns.get(i);
            BeanField beanField = findFieldByOrderedColumn(columnName);

            // Utiliser le nom de colonne défini dans @CsvBindByName, ou le nom brut si absent
            customHeader[i] = (beanField != null) ? extractHeaderName(beanField) : columnName;
        }

        return customHeader;
    }

    // Trouver le champ correspondant en fonction du nom de colonne spécifié dans orderedColumns
    private BeanField findFieldByOrderedColumn(String columnName) {
        for (BeanField beanField : getFieldMap().values()) {
            String headerName = extractHeaderName(beanField);
            if (headerName != null && headerName.equalsIgnoreCase(columnName)) {
                return beanField;
            }
        }
        return null;
    }

    // Extrait le nom de colonne défini dans @CsvBindByName
    public String extractHeaderName(BeanField beanField) {
        if (beanField == null || beanField.getField() == null
                || beanField.getField().getDeclaredAnnotationsByType(CsvBindByName.class).length == 0) {
            return StringUtils.EMPTY;
        }

        final CsvBindByName bindByNameAnnotation = beanField.getField().getDeclaredAnnotationsByType(CsvBindByName.class)[0];
        return bindByNameAnnotation.column();
    }
}
