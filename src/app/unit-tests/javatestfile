import com.opencsv.bean.ColumnPositionMappingStrategy;
import com.opencsv.bean.BeanField;
import com.opencsv.exceptions.CsvRequiredFieldEmptyException;
import java.util.List;

public class ExportCustomMappingStrategy<T> extends ColumnPositionMappingStrategy<T> {
    private final List<String> orderedColumns;

    public ExportCustomMappingStrategy(List<String> orderedColumns) {
        this.orderedColumns = orderedColumns;
    }

    @Override
    public String[] generateHeader(T bean) throws CsvRequiredFieldEmptyException {
        final int numColumns = orderedColumns.size();
        String[] customHeader = new String[numColumns];

        for (int i = 0; i < numColumns; i++) {
            // Obtenir le nom de la colonne de la requête
            String requestColumn = orderedColumns.get(i);

            // Trouver le champ correspondant dans la classe en fonction du nom de la colonne
            BeanField beanField = findFieldByRequestColumn(requestColumn);
            if (beanField != null) {
                // Obtenir le nom de la colonne défini dans @CsvBindByName
                String columnHeaderName = extractHeaderName(beanField);
                customHeader[i] = columnHeaderName != null ? columnHeaderName : requestColumn;
            } else {
                customHeader[i] = requestColumn; // Au cas où le champ ne serait pas trouvé
            }
        }

        return customHeader;
    }

    @Override
    public BeanField findField(int col) throws CsvRequiredFieldEmptyException {
        if (col < orderedColumns.size()) {
            String requestColumn = orderedColumns.get(col);
            return findFieldByRequestColumn(requestColumn);
        }
        return null;
    }

    // Trouver le champ correspondant au nom de la colonne de la requête
    private BeanField findFieldByRequestColumn(String requestColumn) {
        for (int i = 0; i < getFieldMap().values().size(); i++) {
            BeanField beanField = findField(i);
            String columnHeaderName = extractHeaderName(beanField);

            // Vérifie si le nom de la colonne dans @CsvBindByName correspond au nom de la requête
            if (columnHeaderName.equalsIgnoreCase(requestColumn)) {
                return beanField;
            }
        }
        return null;
    }

    // Méthode pour extraire le nom de colonne à partir de l'annotation @CsvBindByName
    public String extractHeaderName(BeanField beanField) {
        if (beanField == null || beanField.getField() == null 
                || beanField.getField().getDeclaredAnnotationsByType(CsvBindByName.class).length == 0) {
            return "";
        }
        CsvBindByName bindByNameAnnotation = beanField.getField().getDeclaredAnnotationsByType(CsvBindByName.class)[0];
        return bindByNameAnnotation.column();
    }
}
