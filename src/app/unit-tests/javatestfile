package com.cacib.t2s.kemm.api.mappers;

import com.cacib.t2s.kemm.utils.exceptions.KemmRuntimeException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class JsonObjectMapperTest {

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private JsonObjectMapper jsonObjectMapper;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testObjectToJsonSuccess() throws Exception {
        // Arrange
        Object object = new Object();
        String jsonString = "{\"key\":\"value\"}";
        when(objectMapper.writeValueAsString(object)).thenReturn(jsonString);

        // Act
        String result = jsonObjectMapper.objectToJson(object);

        // Assert
        assertNotNull(result);
        assertEquals(jsonString, result);
        verify(objectMapper, times(1)).writeValueAsString(object);
    }

    @Test
    void testObjectToJsonWithNullObject() {
        // Act
        String result = jsonObjectMapper.objectToJson(null);

        // Assert
        assertNull(result);
        verifyNoInteractions(objectMapper);
    }

    @Test
    void testObjectToJsonThrowsException() throws Exception {
        // Arrange
        Object object = new Object();
        when(objectMapper.writeValueAsString(object)).thenThrow(new RuntimeException("Serialization error"));

        // Act & Assert
        KemmRuntimeException exception = assertThrows(KemmRuntimeException.class, () -> {
            jsonObjectMapper.objectToJson(object);
        });
        assertNotNull(exception);
        verify(objectMapper, times(1)).writeValueAsString(object);
    }

    @Test
    void testJsonToObjectSuccess() throws Exception {
        // Arrange
        String json = "{\"key\":\"value\"}";
        Object object = new Object();
        when(objectMapper.readValue(json, Object.class)).thenReturn(object);

        // Act
        Object result = jsonObjectMapper.jsonToObject(json);

        // Assert
        assertNotNull(result);
        assertEquals(object, result);
        verify(objectMapper, times(1)).readValue(json, Object.class);
    }

    @Test
    void testJsonToObjectWithNullJson() {
        // Act
        Object result = jsonObjectMapper.jsonToObject(null);

        // Assert
        assertNull(result);
        verifyNoInteractions(objectMapper);
    }

    @Test
    void testJsonToObjectThrowsException() throws Exception {
        // Arrange
        String json = "{\"key\":\"value\"}";
        when(objectMapper.readValue(json, Object.class)).thenThrow(new RuntimeException("Deserialization error"));

        // Act & Assert
        KemmRuntimeException exception = assertThrows(KemmRuntimeException.class, () -> {
            jsonObjectMapper.jsonToObject(json);
        });
        assertNotNull(exception);
        verify(objectMapper, times(1)).readValue(json, Object.class);
    }
}
