Pour modifier votre code afin qu'il retourne un statut No Content (204) au lieu de lancer une exception si le compte n'est pas trouvé, vous pouvez ajuster la méthode en question pour qu'elle utilise une logique conditionnelle pour vérifier la présence d'une entité et retourner la réponse appropriée. Voici un exemple adapté :

@Override
public ResponseEntity<NostroAccountReferentialDto> getByAccountNumberAndBicEntity(String accountNumber, String bicEntity) {
    log.info("Receive request to search nostro referential with account number {} and bic entity {}", accountNumber, bicEntity);

    Optional<NostroAccountReferential> referential = nostroAccountReferentialService.getByAccountNumberAndBicEntity(accountNumber, bicEntity);

    if (referential.isEmpty()) {
        log.info("No nostro referential found with account number {} and bic entity {}", accountNumber, bicEntity);
        return ResponseEntity.noContent().build();
    }

    log.info("The nostro referential with account number {} and the bic entity {} exists: {}", accountNumber, bicEntity, referential.get());
    NostroAccountReferentialDto dto = nostroAccountReferentialMapper.toDto(referential.get());

    return ResponseEntity.ok(dto);
}

Explication des modifications :

1. Retourner ResponseEntity :

Utilisez ResponseEntity comme type de retour pour inclure des statuts HTTP dans votre réponse.



2. Gestion de l'absence de compte :

Si referential.isEmpty() est vrai, la méthode retourne un statut HTTP 204 No Content grâce à ResponseEntity.noContent().build().



3. Mapper l'entité à DTO et retourner une réponse 200 OK :

Si un compte est trouvé, il est mappé à un DTO, et la réponse est encapsulée avec un statut 200 OK.




Cette approche respecte les conventions RESTful, où une requête réussie mais sans résultat retourne un statut HTTP 204.

