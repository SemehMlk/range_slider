import java.util.*;
import java.util.regex.*;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class CLOProcessor {

    private final CLORepository cloRepository;

    // Étape 1 : Extraire les CLOs sous forme de liste unique (sans doublons)
    public List<String> extractCLOs(String text) {
        Set<String> cloSet = new HashSet<>(); // Utilisation d'un Set pour éviter les doublons
        Pattern pattern = Pattern.compile("#CLO(.*?)#");
        Matcher matcher = pattern.matcher(text);

        while (matcher.find()) {
            String cloKey = matcher.group(1).trim(); // Extraire uniquement l'ID sans #CLO
            cloSet.add(cloKey); // Ajouter à la liste unique
        }

        return new ArrayList<>(cloSet); // Retourner une liste unique
    }

    // Étape 2 : Récupérer les valeurs depuis la base de données en une seule requête
    public Map<String, String> fetchCLOValues(List<String> cloIds) {
        return cloRepository.findByIdIn(cloIds).stream()
            .collect(Collectors.toMap(CLOEntity::getId, CLOEntity::getValue));
    }

    // Étape 3 : Remplacer les CLOs dans le texte par leurs valeurs récupérées
    public String replaceCLOs(String text, Map<String, String> cloValues) {
        for (Map.Entry<String, String> entry : cloValues.entrySet()) {
            text = text.replace("#CLO" + entry.getKey() + "#", entry.getValue());
        }
        return text;
    }

    // Exécution complète
    public String processText(String text) {
        List<String> cloIds = extractCLOs(text); // Extraction des CLOs (Liste unique)
        Map<String, String> cloValues = fetchCLOValues(cloIds); // Récupération en DB
        return replaceCLOs(text, cloValues); // Remplacement dans le texte
    }
}
